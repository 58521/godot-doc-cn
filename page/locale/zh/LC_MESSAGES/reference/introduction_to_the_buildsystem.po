# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../reference/introduction_to_the_buildsystem.rst:4
msgid "Introduction to the buildsystem"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:9
msgid "Scons"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:11
msgid ""
"Godot uses `Scons <http://www.scons.org>`__ to build. We love it, we are "
"not changing it for anything else. We are not even sure other build "
"systems are up to the task of building Godot. We constantly get requests "
"to move the build system to CMake, or Visual Studio, but this is not "
"going to happen. There are many reasons why we have chosen SCons over "
"other alternatives and are listed as follows:"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:18
msgid ""
"Godot can be compiled for a dozen different platforms. All PC platforms, "
"all mobile platforms, many consoles, and many web-based platforms (such "
"as HTML5 and Chrome PNACL)."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:21
msgid ""
"Developers often need to compile for several of the platforms **at the "
"same time**, or even different targets of the same platform. They can't "
"afford reconfiguring and rebuilding the project each time. SCons can do "
"this with no sweat, without breaking the builds."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:25
msgid ""
"SCons will *never* break a build no matter how many changes, "
"configurations, additions, removals etc. You have more chances to die "
"struck by lightning than needing to clean and rebuild in SCons."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:28
msgid ""
"Godot build process is not simple. Several files are generated by code "
"(binders), others are parsed (shaders), and others need to offer "
"customization (plugins). This requires complex logic which is easier to "
"write in an actual programming language (like Python) rather than using a"
" mostly macro-based language only meant for building."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:33
msgid ""
"Godot build process makes heavy use of cross compiling tools. Each "
"platform has a specific detection process, and all these must be handled "
"as specific cases with special code written for each."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:37
msgid ""
"So, please get at least a little familiar with it if you are planning to "
"build Godot yourself."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:41
msgid "Platform selection"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:43
msgid ""
"Godot's build system will begin by detecting the platforms it can build "
"for. If not detected, the platform will simply not appear on the list of "
"available platforms. The build requirements for each platform are "
"described in the rest of this tutorial section."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:48
msgid "Scons is invoked by just calling ``scons``."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:50
msgid ""
"However, this will do nothing except list the available platforms, for "
"example:"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:71
msgid ""
"To build for a platform (for example, x11), run with the ``platform=`` "
"(or just ``p=`` to make it short) argument:"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:78
msgid ""
"This will start the build process, which will take a while. If you want "
"scons to build faster, use the ``-j <cores>`` parameter to specify how "
"many cores will be used for the build. Or just leave it using one core, "
"so you can use your computer for something else :)"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:83
msgid "Example for using 4 cores:"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:90
msgid "Resulting binary"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:92
msgid ""
"The resulting binaries will be placed in the bin/ subdirectory, generally"
" with this naming convention:"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:99
msgid "For the previous build attempt the result would look like this:"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:106
msgid ""
"This means that the binary is for X11, is not optimized, has tools (the "
"whole editor) compiled in, and is meant for 64 bits."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:109
msgid "A Windows binary with the same configuration will look like this."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:116
msgid ""
"Just copy that binary to wherever you like, as it self-contains the "
"project manager, editor and all means to execute the game. However, it "
"lacks the data to export it to the different platforms. For that the "
"export templates are needed (which can be either downloaded from "
"`godotengine.org <http://godotengine.org>`, or you can build them "
"yourself)."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:122
msgid ""
"Aside from that, there are a few standard options that can be set in all "
"build targets, and will be explained as follows."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:126
msgid "Tools"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:128
msgid ""
"Tools are enabled by default in al PC targets (Linux, Windows, OSX), "
"disabled for everything else. Disabling tools produces a binary that can "
"run projects but that does not include the editor or the project manager."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:138
msgid "Target"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:140
msgid "Target controls optimization and debug flags. Each mode means:"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:142
msgid ""
"**debug**: Build with C++ debugging symbols, runtime checks (performs "
"checks and reports error) and none to little optimization."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:144
msgid ""
"**release_debug**: Build without C++ debugging symbols and optimization, "
"but keep the runtime checks (performs checks and reports errors). "
"Official binaries use this configuration."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:147
msgid ""
"**release**: Build without symbols, with optimization and with little to "
"no runtime checks. This target can't be used together with tools=yes, as "
"the tools require some debug functionality and run-time checks to run."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:156
msgid ""
"This flag appends \".debug\" suffix (for debug), or \".tools\" (for debug"
" with tools enabled). When optimization is enabled (release) it appends "
"the \".opt\" suffix."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:161
msgid "Bits"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:163
msgid ""
"Bits is meant to control the CPU or OS version intended to run the "
"binaries. It works mostly on desktop platforms and ignored everywhere "
"else."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:167
msgid "**32**: Build binaries for 32 bits platform."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:168
msgid "**64**: Build binaries for 64 bits platform."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:169
msgid ""
"**default**: Built whatever the build system feels is best. On Linux this"
" depends on the host platform (if not cross compiling), while on Windows "
"and Mac it defaults to produce 32 bits binaries unless 64 bits is "
"specified."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:178
msgid ""
"This flag appends \".32\" or \".64\" suffixes to resulting binaries when "
"relevant."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:182
msgid "Export templates"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:184
msgid ""
"Official export templates are downloaded from the Godot Engine site: "
"`godotengine.org <http://godotengine.org>`. However, you might want to "
"build them yourself (in case you want newer ones, you are using custom "
"modules, or simply don't trust your own shadow)."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:189
msgid ""
"If you download the official export templates package and unzip it, you "
"will notice that most are just optimized binaries or packages for each "
"platform:"
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:212
msgid ""
"To create those yourself, just follow the instructions detailed for each "
"platform in this same tutorial section. Each platform explains how to "
"create it's own template."
msgstr ""

#: ../../reference/introduction_to_the_buildsystem.rst:216
msgid ""
"If you are working for multiple platforms, OSX is definitely the best "
"host platform for cross compilation, since you can cross-compile for "
"almost every target (except for winrt). Linux and Windows come in second "
"place, but Linux has the advantage of being the easier platform to set "
"this up."
msgstr ""

