# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: 2016-08-24 17:18+0800\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"X-Generator: Poedit 1.8.8\n"

#: ../../reference/packaging_godot.rst:4
msgid "Packaging Godot"
msgstr "打包 Godot"

#: ../../reference/packaging_godot.rst:6
msgid ""
"Starting with 2.0, Godot has features to make it easier to package it "
"for application repositories."
msgstr "从 2.0 版本以来，Godot 拥有了一些更易于对应用程序库打包的特性。"

#: ../../reference/packaging_godot.rst:9
msgid "Default behaviour"
msgstr "默认行为"

#: ../../reference/packaging_godot.rst:11
msgid ""
"Per default, Godot stores all settings and installed templates in a per-"
"user directory. First Godot checks the ``APPDATA`` environment variable. "
"If it exists, the per-user directory is the \"Godot\" subdirectory of ``"
"$APPDATA``. If ``APPDATA`` doesn't exist, Godot checks the ``HOME`` "
"environment variable. The per-user directory is then the \".godot\" "
"subdir of ``$HOME``."
msgstr ""
"默认情况下，Godot 在用户目录储存所有设置和已安装的模板。首先 Godot 检查 "
"``APPDATA`` 环境变量。如果存在，那么用户目录将是 ``$APPDATA`` 下的 "
"\"Godot\"  子目录。如果 ``APPDATA`` 不存在，Godot 将检查 ``HOME`` 环境变"
"量，用户目录将是 ``$HOME`` 下的 \".godot\" 子目录。"

#: ../../reference/packaging_godot.rst:17
msgid "This meets common operating system standards."
msgstr "这符合常见操作系统的标准。"

# 这一段翻译对概念掌握的不太准确，可能会有比较多的问题
#: ../../reference/packaging_godot.rst:20
msgid "Global template path (Unix only)"
msgstr "全局模板目录（仅限 Unix）"

#: ../../reference/packaging_godot.rst:22
msgid ""
"The ``unix_global_settings_path`` build variable is meant for Unix/Linux "
"distro packagers who want to package export templates together with "
"godot. It allows to put the export templates on a hardcoded path."
msgstr ""
"``unix_global_settings_path`` 构建变量对想要将导出模板和 Godot 封装在一块"
"的 Unix/Linux 发行版软件包来说有意义。这允许你将导出模板放在一个硬编码路"
"径。"

#: ../../reference/packaging_godot.rst:26
msgid ""
"To use it, pass the desired path via the scons "
"``unix_global_settings_path`` build variable when building the editor. "
"The export templates then live at the \"templates\" subdirectory of the "
"path specified."
msgstr ""
"若要使用它，通过设置 scons 的 ``unix_global_settings_path`` 构建变量，在"
"构建编辑器时传入想要的路径即可。导出模板应存在于指定路径的 \"templates\" "
"子目录。"

#: ../../reference/packaging_godot.rst:30
msgid ""
"Templates installed at the per-user location still override the system "
"wide templates."
msgstr "安装在用户目录的模板将覆盖系统模板。"

#: ../../reference/packaging_godot.rst:32
msgid "This option is only available on unix based platforms."
msgstr "此选项仅在基于 unix 的平台上可用。"

#: ../../reference/packaging_godot.rst:35
msgid "Self contained mode"
msgstr "自包含模式"

#: ../../reference/packaging_godot.rst:37
msgid ""
"The self contained mode can be used to package godot for distribution "
"systems where godot doesn't live at a fixed location. If the godot "
"editor finds a ``._sc_`` file in the directory the executable is "
"located, godot will continue in \"self contained mode\"."
msgstr ""
"自包含模式能够为 godot 不存在于固定路径的发行系统打包 godot。如果 godot "
"编辑器在其可执行文件目录找到 ``._sc_`` 文件，godot 将进入 \"自包含模式"
"\"。"

#: ../../reference/packaging_godot.rst:41
msgid ""
"In self contained mode, all config files are located next to the "
"executable in a directory called ``editor_data``. Godot doesn't read or "
"write to the per-user location anymore."
msgstr ""
"在自包含模式中，所有配置文件位于可执行文件的同一目录的 ``editor_data`` 子"
"目录下。Godot 不再对用户目录做任何读写操作。"

#: ../../reference/packaging_godot.rst:44
msgid ""
"The contents of the ``._sc_`` file (when not empty) are read with the "
"ConfigFile api (same format as ``engine.cfg``, etc). So far it can "
"contain a list of pre-loaded project in this format:"
msgstr ""
"``._sc_`` 文件的内容（若不为空）会被ConfigFile api所读取（格式与 "
"``engine.cfg`` 相同）。目前它的格式中能够包含一个预加载项目列表。"

#: ../../reference/packaging_godot.rst:53
msgid ""
"The paths are relative to the executable location, and will be added to "
"the file ``editor_settings.xml`` when this is created for the first time."
msgstr ""
"路径与可执行文件路径有关，同时在 ``editor_settings.xml`` 文件首次被创建时"
"将被添加进来。"
