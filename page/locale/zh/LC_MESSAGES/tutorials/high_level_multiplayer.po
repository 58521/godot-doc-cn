# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/high_level_multiplayer.rst:4
msgid "High Level Multiplayer (Godot 2.2+)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:7
msgid "Why high level?"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:9
msgid ""
"Godot always supported standard networking via UDP, TCP and some high "
"level protocols such as SSL and HTTP. These protocols are very flexible "
"and should support everything. However, for games themselves (or unless "
"you are working with a custom server), using them to synchronize game "
"state manually can be an enormous amount of work. This is due to the "
"inherent limitations of the protocols:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:14
msgid ""
"TCP ensures packets will always arrive, but latency is generally high due"
" to error correction. It's also quite a complex protocol because it "
"understands what a \"connection\" is."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:15
msgid ""
"UDP is a simpler protocol which only sends packets (no connection "
"required). The fact it does no error correction makes it pretty quick "
"(low latency), but it has the disadvantage that packets may be lost along"
" the way. Added to that, the MTU (maximum packet size) for UDP is "
"generally low (only a few hundred bytes), so transmitting larger packets "
"means splitting them, reorganizing them, retrying if a part fails, etc."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:18
msgid "Mid level abstraction"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:20
msgid ""
"Before going into how we would like to synchronize a game across the "
"network, it would be wise to understand how the base network API for "
"synchronization works. Godot uses a mid-level object "
":ref:`NetworkedMultiplayerPeer <class_NetworkedMultiplayerPeer>`. This "
"object can't be created directly, but it's designed so several "
"implementations can provide it:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:26
msgid ""
"This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it has "
"all the useful methods for serializing data you are used to, thanks to "
"Godot's beautiful OO design. It adds methods to set a peer, transfer "
"mode, etc. It also includes signals that will let you know when peers "
"connect or disconnect."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:30
msgid ""
"The idea is that this class interface can abstract most types of network "
"layers, topologies and libraries. By default Godot provides an "
"implementation based on ENet (:ref:`NetworkedMultiplayerEnet "
"<class_NetworkedMultiplayerENet>`), but the plan is that this could "
"support mobile APIs (for adhoc wifi, Bluetooth), custom device/console "
"networking APIs, etc."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:33
msgid ""
"For most common cases, using this object directly is discouraged, as "
"Godot provides even higher level networking facilities. Yet it is made "
"available to scripting in case a game has specific needs for a lower "
"level API."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:37
msgid "Initializing the Network"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:39
msgid ""
"The object that controls networking in Godot is the same one that "
"controls everything tree-related: :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:41
msgid ""
"To initialize high level networking, SceneTree must be provided a "
"NetworkedMultiplayerPeer object."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:43
msgid "Initializing as a server, listening on a port, maximum 4 peers:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:51
msgid "Initializing as a client, connecto an ip:port:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:59
msgid "Finalizing networking:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:66
msgid "Managing connections:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:68
msgid ""
"Some games accept conections at any time, others during the lobby phase. "
"Godot can be requested to no longer accept connections at any point. To "
"manage who connects, Godot provides the following signas in SceneTree:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:71
msgid "Server and Clients:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:73
msgid "network_peer_connected(int id)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:74
msgid "network_peer_disconnected(int id)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:76
msgid ""
"The above signals are called in every connected peer to the server when a"
" new one connects or disconnects. Is's very useful to keep track of the "
"ids above (clients will connect with non-zero and non-one unique IDs), "
"while the server is warranted to always use ID=1. These IDs will be "
"useful mostly for lobby management."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:80
msgid "Clients:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:82
msgid "connected_to_server"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:83
msgid "connection_failed"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:84
msgid "server_disconnected"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:86
msgid ""
"Again, all these functions are mainly useful for lobby management, or for"
" adding/removing players on the fly. For these tasks, the server clearly "
"has to work as a server and you have do tasks manually such as sending a "
"new player that connected information about other already connected "
"players (ie, their names, stats, etc)."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:90
msgid ""
"Lobby can be implemented any way you want, but the most common way is to "
"use a node with the same name across scenes in all peers. Generally, an "
"autoloaded node/singleton is a great fit for this. Imagine you have "
"something like \"/root/lobby\"."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:94
msgid "RPC"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:96
msgid ""
"To communicate between peers, the easiest way is to use RPC (remote "
"procedure call). This is implemented as a set of functions in :ref:`Node "
"<class_Node>`:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:99
msgid "rpc(\"function_name\",<optional_args>)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:100
msgid "rpc_id(<peer_id>,\"function_name\",<optional_args>)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:101
msgid "rpc_unreliable(\"function_name\",<optional_args>)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:102
msgid "rpc_unreliable_id(<peer_id>,\"function_name\",<optional_args>)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:104
msgid "Synchronizing member variables is also possible:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:106
msgid "rset(\"variable\",value)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:107
msgid "rset_id(<peer_id>,\"variable\",value)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:108
msgid "rset_unreliable(\"variable\",value)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:109
msgid "rset_unreliable_id(<peer_id>,\"variable\",value)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:111
msgid "Functions can be called in two fashions:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:113
msgid ""
"Reliable (call will arrive no matter what, but may take longer because it"
" will be re-transmitted in fails)"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:114
msgid ""
"Unreliable (if the function call does not arrive, it will not be re-"
"transmitted, but if it arrives it will do it quickly)."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:116
msgid ""
"In most cases, Reliable is desired. Unreliable is mostly useful when "
"synchronizing objects that move (sync must happen constantly, and if a "
"packet is lost, it's not tbat bad beause a new one will eventually "
"arrive)."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:120
msgid "Back to Lobby"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:122
msgid ""
"Let's back to the lobby. Imagine that each player that connects to the "
"server will tell everyone about it."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:175
msgid ""
"You might have noticed already something different, which is the usage of"
" the \"remote\" keyword on the register_player function:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:181
msgid ""
"This keyword has two main uses. The first is to let Godot know that this "
"function can be called from RPC. If no keywords are added, Godot will "
"block any attempts to call functions for security. This makes security "
"work a lot easier (so a client can't call a function to delete a file in "
"another)."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:185
msgid ""
"The second use, is to specify how the function will be called via RPC. "
"There are four different keywords:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:187
msgid "remote"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:188
msgid "sync"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:189
msgid "master"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:190
msgid "slave"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:192
msgid ""
"The \"remote\" keyword means that the rpc() call will go via network and "
"execute remotely."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:194
msgid ""
"The \"sync\" keyword means that the rpc() call will go via network and "
"execute remotely, but will also execute locally (do a normal function "
"call)."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:196
msgid "The others will be explained further down."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:198
msgid ""
"With this, lobby management should be more or less explained. One you "
"have your game going, you will most likely want to add some extra "
"security to make sure clients don't do anything funny (just validate the "
"info they send from time to time, or before game start). For the sake of "
"simplicity and the fact each game will share different information, this "
"was not done here."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:203
msgid "Starting the game"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:205
msgid ""
"Once enough people has gathered in the Lobby, the server will most likely"
" want to start the game. This is honestly nothing special in itself, but "
"we'll explain a few nice tricks that can be done at this point to make "
"your life much easier."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:209
msgid "Player Scenes:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:211
msgid ""
"In most games, each player will likely have it's own scene. Remember that"
" this is a multiplayer game, so in every peer you need to instance **one "
"scene for each player connected to it**. For a 4 player game, each peer "
"needs to instance 4 player nodes."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:214
msgid ""
"So, how to name such nodes? In godot nodes need to have an unique name. "
"It must also be relatively easy for a player to tell which nodes "
"represent each player id."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:217
msgid ""
"The solution is to simply name the *root nodes of the instanced player "
"scenes as their network ID*. This way, they will be the same in every "
"peer and RPC will work great! Here is an example:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:245
msgid "Synchronized game start"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:247
msgid ""
"Setting up players might take different amount of time on every peer due "
"to lag and any large number of reasons. To make sure the game will "
"actually start when everyone is ready, pausing the game can be very "
"useful:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:256
msgid ""
"When the server gets the OK from all the peers, it can tell them to "
"start, as for example"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:277
msgid "Synchronizing the game"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:279
msgid ""
"In most games, the goal of supporting multiplayer neworking is to make "
"sure that the game runs synchronized in all the peers playing it. Besides"
" supplying an RPC and remote member variable set implementation. Godot "
"adds the concept of master and slave network modes."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:282
#: ../../tutorials/high_level_multiplayer.rst:320
msgid "Master and slave"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:284
msgid ""
"Very similar to how the pause mode works in regular nodes (with pause, "
"process, inherit modes), nodes can be set a \"network mode\" with the "
"function Node.set_network_mode(mode). Mode can be: Master, Slave and "
"Inherit."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:286
msgid ""
"The Inherit mode assumes the value of the parent node. If the parent node"
" is also in this mode, it will go up in the parenthood chain until it "
"finds a mode. If no mode set is found, Master will be assumed for the "
"server and Slave for clients."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:288
msgid ""
"This means that, upon loading scenes, the client is by default the master"
" and clients are the slaves. Checking that a node is in master mode is "
"done by calling:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:294
msgid ""
"If you have paid attention to the previous example, it's possible you "
"noticed each node being set a role when being loaded in each peer:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:314
msgid ""
"Here, each time this piece of code is executed on each peer, the peer "
"makes the node it controls master, and the ones it does not slaves. The "
"modes for each are different on each peer. To clarify, here is an example"
" of how this looks in the bomber demo:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:322
msgid ""
"The real advantage of this model is when used with the master/slave "
"keywords in GDScript (Don't worry we'll have something similar in C#, "
"Visual Script). Similar to \"remote\", functions can also be tagged with "
"them:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:324
msgid "Example bomb code:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:333
msgid "Example player code:"
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:349
msgid ""
"In the above example, a bomb explodes somewhere (likely managed by "
"whoever is master). The bomb knows the bodies in the area, so it checks "
"them and checks that they contain an \"exploded\" function."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:351
msgid ""
"If they do, the bomb calls \"exploded\" on it. However, the \"exploded\" "
"method in the player has a \"master\" keyword. This means that only the "
"player who is master for that instance will actually get the function."
msgstr ""

#: ../../tutorials/high_level_multiplayer.rst:353
msgid ""
"This instance, then, calls the \"stun\" function in the same instances of"
" that same player (but in different peers), and only those which are set "
"as slave, making the player look stunned in all the peers (as well as the"
" current, master one)."
msgstr ""

