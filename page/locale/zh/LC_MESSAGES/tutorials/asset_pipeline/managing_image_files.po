# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/asset_pipeline/managing_image_files.rst:4
msgid "Managing image files"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:6
msgid ""
"If you have read the previous tutorials on :ref:`doc_resources` and "
":ref:`doc_filesystem`, at this point you know that regular image files "
"(.png, .jpg, etc.) are treated as regular resources in Godot."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:10
msgid ""
"Unlike texture resources (.tex files), image files contain no extra "
"information on tiling (texture repeat), mipmaps or filtering. Editing "
"this information and saving the texture back will not have any effect, "
"since such formats can't contain that information."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:16
msgid "Image loader"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:18
msgid ""
"Loading of images is done by the image loader. The behavior of the loader"
" for all image files can be changed in the Project Settings dialog (Scene"
" -> Project Settings). There is a section with values that are used for "
"all image resources:"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:26
msgid "Image loader options"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:29
msgid "Filter"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:31
msgid ""
"Filter is used when the image is stretched more than its original size, "
"so a texel in the image is bigger than a pixel on the screen. Turning off"
" the filter produces a retro-like look:"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:38
msgid "Repeat"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:40
msgid ""
"Repeat is mainly used for 3D textures, so it's off by default (textures "
"are imported with the scenes and usually are not in the project as image "
"files). When using UV coordinates (something not as common in 2D), and "
"the UV value goes beyond the 0,0,1,1 rect, the texture repeats instead of"
" clamping to the edge."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:47
msgid "Mipmaps"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:49
msgid ""
"When the mipmaps option is enabled, Godot will generate mipmaps. Mipmaps "
"are versions of the image shrunk by half in both axis, recursively, until"
" the image is 1 pixel of size. When the 3D hardware needs to shrink the "
"image, it finds the largest mipmap it can scale from, and scales from "
"there. This improves performance and image quality."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:58
msgid ""
"When mipmaps are disabled, images start distorting badly when shrunk "
"excessively:"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:64
msgid "Alpha blending"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:66
msgid ""
"The `blending equation "
"<http://en.wikipedia.org/wiki/Alpha_compositing>`__ used by applications "
"like Photoshop is too complex for real-time. There are better "
"approximations such as `pre-multiplied alpha "
"<http://blogs.msdn.com/b/shawnhar/archive/2009/11/06/premultiplied-"
"alpha.aspx?Redirected=true>`__, but they impose more stress in the asset "
"pipeline. In the end, we are left with textures that have artifacts in "
"the edges, because apps such as Photoshop store white pixels in "
"completely transparent areas. Such white pixels end up showing thanks to "
"the texture filter (when active)."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:76
msgid ""
"Godot has an option to fix the edges of the image (by painting invisible "
"pixels the same color as the visible neighbours):"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:81
msgid ""
"To do this, open the image from the resources tab, or edit it from the "
"property editor from another node or resource, then go to the object "
"options and select \"Fix Alpha Edges\", then save it."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:87
msgid ""
"Since fixing this in so many images can be a little annoying, both "
"Texture Import and Image Export can also perform this operation."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:91
msgid "Texture import"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:93
msgid ""
"Sometimes, it might be desired to change the above settings per image. "
"Unfortunately, the image loader settings are global. Texture flags also "
"can't be saved in a regular .png or .jpg file."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:97
msgid ""
"For such cases, the image can be imported as a texture (.tex), where the "
"individual flags can be changed. Godot also keeps track of the original "
"file and will re-import if it changes."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:101
msgid ""
"Importing also allows conversion to other formats (WebP, or RAM "
"compression) which might be of use in some cases. More information on the"
" :ref:`doc_importing_textures` page."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:106
msgid "Image export"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:108
msgid ""
"It is also possible to convert images to other formats (WebP or RAM "
"compression) on export, as well as instructing the exporter to create an "
"Atlas for a set of images. It is also possible to ask the exporter to "
"scale all images (or selected groups)."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:113
msgid "More information on the :ref:`doc_exporting_images` page."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:116
msgid "Fixing PNGs iCCP chunk"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:118
msgid ""
"With the upgrade of libpng to 1.6.23, libpng became more strict in terms "
"of enforcing iCC profile correctness. This means that it now warns when "
"it comes across an image with a non-conforming iCC chunk."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:122
msgid "WARNING: _png_warn_function: iCCP: known incorrect sRGB profile"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:124
msgid ""
"This can be fixed by either using a tool that exports PNGs with the "
"correct iCC profile (in some tools this profile can even be manually "
"changed on export) or using a tool that removes/fixes the iCC chunks."
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:129
msgid "Linux/Mac"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:130
msgid ""
"Using ImageMagicks ``convert`` or ``mogrify`` fixes these warnings. To "
"fix all PNGs in a project folder do:"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:137
msgid "``pngcheck`` is also useful in locating the non-conforming images:"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:144
msgid "Windows"
msgstr ""

#: ../../tutorials/asset_pipeline/managing_image_files.rst:145
msgid ""
"Using `optiPNG <http://optipng.sourceforge.net/>` fixes these warnings on"
" Windows. To fix a PNG inplace do:"
msgstr ""

