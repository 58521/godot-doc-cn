# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: 2017-05-19 15:51+0800\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"X-Generator: Poedit 2.0.2\n"

#: ../../tutorials/asset_pipeline/exporting_projects.rst:4
msgid "Exporting projects"
msgstr "导出工程"

#: ../../tutorials/asset_pipeline/exporting_projects.rst:7
msgid "Why exporting?"
msgstr "为什么要导出？"

#: ../../tutorials/asset_pipeline/exporting_projects.rst:9
msgid ""
"Originally, Godot did not have any means to export projects. The "
"developers would compile the proper binaries and build the packages for "
"each platform manually."
msgstr ""
"最初，Godot并没有导出工程的方法，开发者需要手动为每个平台编译二进制文件并"
"生成包。"

#: ../../tutorials/asset_pipeline/exporting_projects.rst:13
msgid ""
"When more developers (and even non-programmers) started using it, and "
"when our company started taking more projects at the same time, it "
"became evident that this was a bottleneck."
msgstr ""
"当更多的开发者（甚至是非程序员）也开始使用的时候，我们公司同时就开始处理"
"更多的工程，显然，已经达到了瓶颈。"

#: ../../tutorials/asset_pipeline/exporting_projects.rst:18
msgid "On PC"
msgstr "在PC上"

#: ../../tutorials/asset_pipeline/exporting_projects.rst:20
msgid ""
"Distributing a game project on PC with Godot is rather easy. Just drop "
"the godot.exe (or godot) binary together in the same place as the engine."
"cfg file, zip it and you are done. This can be taken advantage of to "
"make custom installers."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:25
msgid ""
"It sounds simple, but there are probably a few reasons why the developer "
"may not want to do this. The first one is that it may not be desirable "
"to distribute loads of files. Some developers may not like curious users "
"peeking at how the game was made, others may just find it inelegant, etc."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:31
msgid ""
"Another reason is that, for distribution, the developer might use a "
"specially compiled binary, which is smaller in size, more optimized and "
"does not include tools inside (like the editor, debugger, etc.)."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:35
msgid ""
"Finally, Godot has a simple but efficient system for creating DLCs as "
"extra package files."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:39
msgid "On mobile"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:41
msgid ""
"The same scenario in mobile is a little worse. To distribute a project "
"in those devices, a binary for each of those platforms is built, then "
"added to a native project together with the game data."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:45
msgid ""
"This can be troublesome because it means that the developer must be "
"familiarized with the SDK of each platform before even being able to "
"export. In other words, while learning each SDK is always encouraged, it "
"can be frustrating to be forced to do it at an undesired time."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:50
msgid ""
"There is also another problem with this approach, which is the fact that "
"different devices prefer some data in different formats to run. The main "
"example of this is texture compression. All PC hardware uses S3TC (BC) "
"compression and that has been standardized for more than a decade, but "
"mobile devices use different formats for texture compression, such as "
"PVRCT (iOS) or ETC (Android)."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:58
msgid "Export dialog"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:60
msgid ""
"After many attempts at different export workflows, the current one has "
"proven to work the best. At the time of this writing, not all platforms "
"are supported yet, but the supported platforms continue to grow."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:64
msgid "To open the export dialog, just click the \"Export\" button:"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:68
msgid "The dialog will open, showing all the supported export platforms:"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:72
msgid ""
"The default options are often enough to export, so tweaking them is not "
"necessary, but provide extra control. However, many platforms require "
"additional tools (SDKs) to be installed to be able to export. "
"Additionally, Godot needs exports templates installed to create "
"packages. The export dialog will complain when something is missing and "
"will not allow the user to export for that platform until they resolve "
"it:"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:81
msgid ""
"At that time, the user is expected to come back to the documentation and "
"follow instructions on how to properly set up that platform."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:85
msgid "Export templates"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:87
msgid ""
"Apart from setting up the platform, the export templates must be "
"installed to be able to export projects. They can be obtained as a .tpz "
"(a renamed .zip) file from the `download page of the website <https://"
"www.godotengine.org/download>`_."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:92
msgid ""
"Once downloaded, they can be installed using the \"Install Export "
"Templates\" option in the editor:"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:98
msgid "Export mode"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:100
msgid ""
"When exporting, Godot makes a list of all the files to export and then "
"creates the package. There are 3 different modes for exporting:"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:103
msgid "Export every single file in the project"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:104
msgid "Export only resources (+custom filter), this is default."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:105
msgid "Export only selected resources (+custom filter)"
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:109
msgid ""
"**Export every single file** - This mode exports every single file in "
"the project. This is good to test if something is being forgotten, but "
"developers often have a lot of unrelated stuff around in the dev "
"directory, which makes it a bad idea."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:114
msgid ""
"**Export only resources** - Only resources are exported. For most "
"projects, this is enough. However many developers like to use custom "
"datafiles in their games. To compensate for this, filters can be added "
"for extra extensions (like, *.txt,*.csv, etc.)."
msgstr ""

#: ../../tutorials/asset_pipeline/exporting_projects.rst:119
msgid ""
"**Export only selected resources** - Only select resources from a list "
"are exported. This is probably overkill for most projects, but in some "
"cases it is justified (usually huge projects). This mode offers total "
"control of what is exported. Individual resources can be selected and "
"dependency detection is performed to ensure that everything needed is "
"added. As a plus, this mode allows to \"Bundle\" scenes and dependencies "
"into a single file, which is *really* useful for games distributed on "
"optical media."
msgstr ""
