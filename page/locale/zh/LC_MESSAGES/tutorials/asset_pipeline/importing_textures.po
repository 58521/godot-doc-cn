# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: 2017-05-17 19:20+0800\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"X-Generator: Poedit 2.0.2\n"

#: ../../tutorials/asset_pipeline/importing_textures.rst:4
msgid "Importing textures"
msgstr "导入纹理"

#: ../../tutorials/asset_pipeline/importing_textures.rst:7
msgid "Do NOT import them in most cases"
msgstr "在绝大多数情况下不要这样做"

#: ../../tutorials/asset_pipeline/importing_textures.rst:9
msgid ""
"In most cases you **don't** want images imported when dealing with 2D and GUI. "
"Just copy them to the filesystem. Read the tutorial on :ref:"
"`doc_managing_image_files` before continuing! For 3D, textures are always "
"imported by the 3D scene importer, so importing those is only useful when "
"importing a texture used for 3D that doesn't come with the 3D scene (for "
"example, in a shader). The flags and options are the same as here, so reading "
"the rest of the document might help too."
msgstr ""
"在大多数情况下，你 **并不** 希望在处理2D和GUI的时候导入图片，那就把它们拷贝到文"
"件系统中。在继续之前请阅读教程 :ref:`doc_managing_image_files` ！对于3D来说，纹"
"理(Textures)通常由3D场景导入器(3D Scene Importer)导入，那么，只有在导入用于3D的"
"但在3D场景中的纹理的时候才可能这样做（例如，在着色器(Shader)中）。下面是它们的标"
"记和选项，因此，读完下面的内容也会有所帮助。"

#: ../../tutorials/asset_pipeline/importing_textures.rst:19
msgid "OK, you *might* want to import them"
msgstr "好吧，你 *可能* 想要导入它们"

#: ../../tutorials/asset_pipeline/importing_textures.rst:21
msgid ""
"So, if you have read the previous tutorial on the texture exporter, the texture "
"importer gives you more fine-grained control on how textures are imported. If "
"you want to change flags such as repeat, filter, mipmaps, fix edges, etc. "
"***PER texture***, importing them is the best way to accomplish this (since you "
"can't save such flags in a standard image file)."
msgstr ""
"那么，如果你已经阅读了上一篇关于纹理导出器的教程，纹理导入器给了你关于纹理如何导"
"入的更为细致的掌控。如果你希望改变诸如重复(Repeat)、过滤(Filter)、细化纹理"
"(Mipmaps)、边缘修复(Fix Edges)等这类纹理标记。 ***对于每张纹理*** ，导入它们是最"
"好的做法（因为你不需要在标准图像文件中保存这些标记）。"

#: ../../tutorials/asset_pipeline/importing_textures.rst:29
msgid "Lack of MipMaps"
msgstr "细化纹理的缺点"

#: ../../tutorials/asset_pipeline/importing_textures.rst:31
msgid ""
"Images in 3D hardware are scaled with a (bi)linear filter, but this method has "
"limitations. When images are shrunk too much, two problems arise:"
msgstr ""
"3D硬件中的图像在缩放的时候使用（双）线性过滤，但这种方法有局限性。当图像被过度缩"
"小的时候，就会产生两个问题："

#: ../../tutorials/asset_pipeline/importing_textures.rst:35
msgid ""
"**Aliasing**: Pixels are skipped too much, and the image shows discontinuities. "
"This decreases quality."
msgstr ""
"**锯齿化走样(Aliasing)** ：被忽略的像素过多的，导致显示出来的图像不是很连贯，降"
"低了质量。"

#: ../../tutorials/asset_pipeline/importing_textures.rst:37
msgid ""
"**Cache Misses**: Pixels being read are too far apart, so texture cache reads a "
"lot more data than it should. This decreases performance."
msgstr ""
"**缓存未命中(Cache Misses)** ：被读取的像素之间离得太远了，因此纹理缓存要比原本"
"多读取大量的数据，这样会影响性能。"

#: ../../tutorials/asset_pipeline/importing_textures.rst:43
msgid ""
"To solve this, mipmaps are created. Mipmaps are versions of the image shrunk by "
"half in both axis, recursively, until the image is 1 pixel of size. When the 3D "
"hardware needs to shrink the image, it finds the largest mipmap it can scale "
"from, and scales from there. This improves performance and image quality."
msgstr ""
"为了解决这个问题，就要创建细化纹理。细化纹理就是图像在两个轴向上均缩放为原来的一"
"半时候的样子，然后递归执行，直至图片被压缩为1像素。当3D应将需要缩小图像的时候，"
"它会寻找他能用来开始缩放的最大细化纹理，然后从这个大小开始缩放，这样可以提升性能"
"和图片的质量。"

#: ../../tutorials/asset_pipeline/importing_textures.rst:51
msgid ""
"Godot automatically creates mipmaps upon load for standard image files. This "
"process is time consuming (although not much) and makes load times a little "
"worse. Pre-importing the textures allows the automatic generation of mipmaps."
msgstr ""
"Godot会自动为载入的标准图像文件创建一个细化纹理。这个过程比较耗时(尽管不是很"
"多)，会使得载入时间更长。预载入的纹理允许自动生成细化纹理。"

#: ../../tutorials/asset_pipeline/importing_textures.rst:57
msgid "Unwanted MipMaps"
msgstr "不必要的细化纹理"

#: ../../tutorials/asset_pipeline/importing_textures.rst:59
msgid ""
"Remember the previous point about mipmaps? Yes, they are cool, but mobile GPUs "
"only support them if the textures are in power of 2 dimensions (i.e. 256x256 or "
"512x128). In these platforms, Godot will stretch and enlarge the texture to the "
"closest power of 2 size and then generate the mipmaps. This process takes more "
"of a performance hit and it might degrade the quality a little more."
msgstr ""
"还记得刚才关于细化纹理的那些特点么？是的，它们很酷，但是移动设备的GPU只支持大小"
"为2的指数形式的纹理(像256×256，或者512×128)。在这些平台上，Godot会将纹理拉伸并放"
"大到与之最近的2的指数形式的尺寸然后生成细化纹理，这个过程会更加影响性能，而且会"
"进一步地降低图像质量。"

#: ../../tutorials/asset_pipeline/importing_textures.rst:66
msgid ""
"Because of this, there are some scenarios when it may be desirable to not use "
"them, and just use a linear filter. One of them is when working with graphical "
"user interfaces (GUIs). Usually they are made of large images and don't stretch "
"much. Even if the screen resolution is in a larger or smaller value than "
"original art, the amount of stretch is not as much and the art can retain the "
"quality. Pre-importing the textures also allows the disabling of mipmap "
"generation."
msgstr ""
"正是由于这一点，才会产生一些并不希望使用它们而只需要使用一个线性过滤的情况。其中"
"一种就是在处理图形用户界面(GUI, Graphical User Interfaces)的时候。它们通常由一些"
"没怎么被拉伸的大型图像制成的。纵使屏幕分辨率比原来设计的要大一点或者小一点，缩放"
"的量只要不是足够大，原本的设计也还可以维持质量。预载入贴图同样允许禁用生成细化纹"
"理。"

#: ../../tutorials/asset_pipeline/importing_textures.rst:75
msgid "Blending artifacts"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:77
msgid ""
"The `blending equation <http://en.wikipedia.org/wiki/Alpha_compositing>`__ used "
"by applications like Photoshop is too complex for realtime. There are better "
"approximations such as `pre-multiplied alpha <http://blogs.msdn.com/b/shawnhar/"
"archive/2009/11/06/premultiplied-alpha.aspx?Redirected=true>`__, but they "
"impose more stress in the asset pipeline. In the end, we are left with textures "
"that have artifacts in the edges, because apps such as Photoshop store white "
"pixels in completely transparent areas. Such white pixels end up showing thanks "
"to the texture filter."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:87
msgid ""
"Godot has an option to fix the edges of the image (by painting invisible pixels "
"the same color as the visible neighbours):"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:92
msgid ""
"However, this must be done every time the image changes. Pre-Importing the "
"textures makes sure that every time the original file changes, this artifact is "
"fixed upon automatic re-import."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:97
msgid "Texture flags"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:99
msgid ""
"Textures have flags. The user can choose for them to repeat or clamp to edges "
"(when UVs exceed the 0,0,1,1 boundary). The magnifying filter can also be "
"turned off (for a Minecraft-like effect). Such values can not be edited in "
"standard file formats (png, jpg, etc.), but can be edited and saved in Godot ."
"tex files. Then again, the user may not want to change the values every time "
"the texture changes. Pre-Importing the textures also takes care of that."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:108
msgid "Texture compression"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:110
msgid ""
"Aside from the typical texture compression, which saves space on disk (.png, "
"jpg, etc.), there are also texture compression formats that save space in "
"memory (more specifically video memory. This allows to have much better looking "
"textures in games without running out of memory, and decrease memory bandwidth "
"when reading them so they are a big plus."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:116
msgid ""
"There are several video texture compression formats, none of which are "
"standard. Apple uses PVRTC. PC GPUs, consoles and nVidia Android devices use "
"S3TC (BC), other chipsets use other formats. OpenGL ES 3.0 standardized on ETC "
"format, but we are still a few years away from that working everywhere."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:121
msgid ""
"Still, when using this option, Godot converts and compresses to the relevant "
"format depending on the target platform (as long as the user pre-imported the "
"texture and specified video ram compression!)."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:125
msgid ""
"This kind of compression is often not desirable for many types of 2D games and "
"UIs because it is lossy, creating visual artifacts. This is especially "
"noticeable on games that use the trendy vectory social game artwork. However, "
"the fact that it saves space and improves performance may make up for it."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:131
msgid "The 3D scene importer always imports textures with this option turned on."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:135
msgid "Atlases"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:137
msgid ""
"Remember how mobile GPUs have this limitation of textures having to be in power "
"of 2 sizes to be able to generate mimpmaps for optimum stretching? What if we "
"have a lot of images in different random sizes? All will have to be scaled and "
"mipmapped when loaded (using more CPU and memory) or when imported (taking more "
"storage space). This is probably still OK, but there is a tool that can help "
"improve this situation."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:144
msgid ""
"Atlases are big textures that fit a lot of small textures inside efficiently. "
"Godot supports creating atlases in the importer, and the imported files are "
"just small resources that reference a region of the bigger texture."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:149
msgid ""
"Atlases can be a nice solution to save some space on GUI or 2D artwork by "
"packing everything together. The current importer is not as useful for 3D "
"though (3D Atlases are created differently, and not all 3D models can use them)."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:154
msgid ""
"As a small plus, atlases can decrease the amount of \"state changes\" when "
"drawing. If a lot of objects that are drawn using several different textures "
"are converted to an atlas, then the texture rebinds per object will go from "
"dozens or hundreds to one. This will give the performance a small boost."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:161
msgid "Artists use PSD"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:163
msgid ""
"Still wondering whether to use the texture importer or not? Remember that in "
"the end, artists will often use Photoshop anyway, so it may be wiser to just "
"let the import subsystem to take care of importing and converting the PSD files "
"instead of asking the artist to save a png and copy it to the project every "
"time."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:170
msgid "Texture importer"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:172
msgid ""
"Finally! It's time to take a look at the texture importer. There are 3 options "
"in the import menu. They are pretty much (almost) the same dialog with a "
"different set of defaults."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:178
msgid ""
"When selected, the texture import dialog will appear. This is the default one "
"for 2D textures:"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:183
msgid "Each import option has a function, explained as follows:"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:186
msgid "Source texture(s)"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:188
msgid ""
"One or more source images can be selected from the same folder (this importer "
"can do batch-conversion). This can be from inside or outside the project."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:193
msgid "Target path"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:195
msgid ""
"A destination folder must be provided. It must be inside the project, as "
"textures will be converted and saved to it. Extensions will be changed to .tex "
"(Godot resource file for textures), but names will be kept."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:200
msgid "Texture format"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:202
msgid "This combo allows to change the texture format (compression in this case):"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:207
msgid ""
"Each of the four options described in this table together with their advantages "
"and disadvantages ( |good| = Best, |bad| =Worst ):"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:211
msgid "Uncompressed"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:211
msgid "Compress Lossless (PNG)"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:211
msgid "Compress Lossy (WebP)"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:211
msgid "Compress VRAM"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:213
msgid "Description"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:213
msgid "Stored as raw pixels"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:213
msgid "Stored as PNG"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:213
msgid "Stored as WebP"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:213
msgid "Stored as S3TC/BC,PVRTC/ETC, depending on platform"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:215
msgid "Size on Disk"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:215
#: ../../tutorials/asset_pipeline/importing_textures.rst:217
msgid "|bad| Large"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:215
msgid "|regular| Small"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:215
msgid "|good| Very Small"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:217
msgid "Memory Usage"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:217
msgid "|good| Small"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:219
msgid "Performance"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:219
#: ../../tutorials/asset_pipeline/importing_textures.rst:223
msgid "|regular| Normal"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:219
#: ../../tutorials/asset_pipeline/importing_textures.rst:223
msgid "|good| Fast"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:221
msgid "Quality Loss"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:221
msgid "|good| None"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:221
msgid "|regular| Slight"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:221
msgid "|bad| Moderate"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:223
msgid "Load Time"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:223
msgid "|bad| Slow"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:227
msgid "Texture options"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:229
msgid "Provided are a small amount of options for fine grained import control:"
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:231
msgid ""
"**Streaming Format** - This does nothing as of yet, but a texture format for "
"streaming different mipmap levels is planned. Big engines have support for this."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:234
msgid ""
"**Fix Border Alpha** - This will fix texture borders to avoid the white auras "
"created by white invisible pixels (see the rant above)."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:236
msgid ""
"**Alpha Bit Hint** - Godot auto-detects if the texture needs alpha bit support "
"for transparency (instead of full range), which is useful for compressed "
"formats such as BC. This forces alpha to be 0 or 1."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:239
msgid ""
"**Compress Extra** - Some VRAM compressions have alternate formats that "
"compress more at the expense of quality (PVRTC2 for example). If this is "
"ticked, texture will be smaller but look worse."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:242
msgid ""
"**No MipMaps** - Force imported texture to NOT use mipmaps. This may be "
"desirable in some cases for 2D (as explained in the rant above), though it's "
"NEVER desirable for 3D."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:245
msgid ""
"**Repeat** - Texture will repeat when UV coordinates go beyond 1 and below 0. "
"This is often desirable in 3D, but may generate artifacts in 2D."
msgstr ""

#: ../../tutorials/asset_pipeline/importing_textures.rst:248
msgid ""
"**Filter** - Enables linear filtering when a texture texel is larger than a "
"screen pixel. This is usually turned on, unless it's required for artistic "
"purposes (Minecraft look, for example)."
msgstr ""
