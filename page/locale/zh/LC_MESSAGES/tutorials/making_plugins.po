# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/making_plugins.rst:4
msgid "Making Plugins"
msgstr ""

#: ../../tutorials/making_plugins.rst:8
msgid "*Important:* This tutorial applies only to the upcoming version 2.1."
msgstr ""

#: ../../tutorials/making_plugins.rst:12
msgid "About Plugins"
msgstr ""

#: ../../tutorials/making_plugins.rst:14
msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be"
" made entirely with GDScript and standard scenes, without even reloading "
"the editor. Unlike modules, you don't need to create C++ code nor "
"recompile the engine. While this makes plugins not as powerful, there's "
"still a lot of things you can do with them. Note that a plugin is not "
"different from any scene you already can make, except that it is made via"
" script to add functionality."
msgstr ""

#: ../../tutorials/making_plugins.rst:21
msgid ""
"This tutorial will guide you through the creation of two simple plugins "
"so you can understand how they work and be able to develop your own. The "
"first will be a custom node that you can add to any scene in the project "
"and the other will be a custom dock added to the editor."
msgstr ""

#: ../../tutorials/making_plugins.rst:27
msgid "Creating a plugin"
msgstr ""

#: ../../tutorials/making_plugins.rst:29
msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as base to develop and test the plugins."
msgstr ""

#: ../../tutorials/making_plugins.rst:32
msgid ""
"The first thing you need to do is to create a new plugin that the editor "
"can understand as such. For that you need two files: ``plugin.cfg`` for "
"the configuration and a custom GDScript with the functionality."
msgstr ""

#: ../../tutorials/making_plugins.rst:36
msgid ""
"Plugins have a standard path like ``addons/plugin_name`` inside the "
"project folder. So create the folder ``my_custom_node`` inside "
"``addons``. So you'll have a directory structure like this:"
msgstr ""

#: ../../tutorials/making_plugins.rst:42
msgid ""
"To make the ``plugin.cfg`` file, open your favorite text editor with a "
"blank file. Godot is not able (yet) to open text files besides scripts, "
"so this must be done in an external editor. Add the following structure "
"to your ``plugin.cfg``::"
msgstr ""

#: ../../tutorials/making_plugins.rst:55
msgid ""
"This is a simple ``ini`` file with metadata about your plugin. You need "
"to set up the name and description so users can understand what it does. "
"Add your own name so you can be properly credited. A version number is "
"useful so users can see if they have an outdated version (if you are "
"unsure on how to come up with the version number, check `SemVer "
"<http://semver.org/>`_). And finally a main script file to load when your"
" plugin is active."
msgstr ""

#: ../../tutorials/making_plugins.rst:63
msgid "The script file"
msgstr ""

#: ../../tutorials/making_plugins.rst:65
msgid ""
"Open the script editor (F3) and create a new GDScript file called "
"``custom_node.gd`` inside the ``my_custom_node`` folder. This script is "
"special and it has two requirements: it must be a ``tool`` script and it "
"has to inherit from :ref:`class_EditorPlugin`."
msgstr ""

#: ../../tutorials/making_plugins.rst:70
msgid ""
"It's important to deal with initialization and clean-up of resources. So "
"a good practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node__enter_tree>` to initialize your plugin and "
":ref:`_exit_tree() <class_Node__exit_tree>` to clean it up. You can "
"delete the default GDScript template from your file and replace it with "
"the following structure:"
msgstr ""

#: ../../tutorials/making_plugins.rst:91
msgid "This is a good template to use when devising new plugins."
msgstr ""

#: ../../tutorials/making_plugins.rst:94
msgid "A custom node"
msgstr ""

#: ../../tutorials/making_plugins.rst:96
msgid ""
"Sometimes you want a certain behavior in many nodes. Maybe a custom scene"
" or control that can be reused. Instancing is helpful in a lot of cases "
"but sometimes it can be cumbersome, especially if you're using it between"
" many projects. A good solution to this is to make a plugin that adds a "
"node with a custom behavior."
msgstr ""

#: ../../tutorials/making_plugins.rst:102
msgid ""
"To create a new node type, you can avail of the function "
":ref:`add_custom_type() <class_EditorPlugin_add_custom_type>` from the "
":ref:`class_EditorPlugin` class. This function can add new types to the "
"editor, be it nodes or resources. But before you can create the type you "
"need a script that will act as the logic for the type. While such script "
"doesn't need to have the ``tool`` keyword, it is interesting to use it so"
" the user can see it acting on the editor."
msgstr ""

#: ../../tutorials/making_plugins.rst:110
msgid ""
"For this tutorial, we'll create a simple button that prints a message "
"when clicked. And for that we'll need a simple script that extends from "
":ref:`class_Button`. It could also extend :ref:`class_BaseButton` if you "
"prefer::"
msgstr ""

#: ../../tutorials/making_plugins.rst:124
msgid ""
"That's it for our basic button. You can save this as ``button.gd`` inside"
" the plugin folder. You'll also need a 16x16 icon to show in the scene "
"tree. If you don't have one, you can grab the default one from the "
"engine:"
msgstr ""

#: ../../tutorials/making_plugins.rst:130
msgid ""
"Now we need to add it as a custom type so it shows on the Create New Node"
" dialog. For that, change the ``custom_node.gd`` script to the "
"following::"
msgstr ""

#: ../../tutorials/making_plugins.rst:146
msgid ""
"With that done, the plugin should already be available in the plugin list"
" at Project Settings. So activate it and try to add a new node to see the"
" result:"
msgstr ""

#: ../../tutorials/making_plugins.rst:151
msgid ""
"When you add the node, you can see that it already have the script you "
"created attached to it. Set a text to the button, save and run the scene."
" When you click the button, you can see a text in the console:"
msgstr ""

#: ../../tutorials/making_plugins.rst:159
msgid "A custom dock"
msgstr ""

#: ../../tutorials/making_plugins.rst:161
msgid ""
"Maybe you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks"
" are just scenes based on control, so how to create them is not far "
"beyond your knowledge."
msgstr ""

#: ../../tutorials/making_plugins.rst:165
msgid ""
"The way to start this plugin is similar to the custom node. So create a "
"new ``plugin.cfg`` file in the ``addons/my_custom_dock`` folder. And then"
" with your favorite text editor add the following content to it::"
msgstr ""

#: ../../tutorials/making_plugins.rst:177
msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` "
"to get a good start."
msgstr ""

#: ../../tutorials/making_plugins.rst:181
msgid ""
"Since we're trying to add a new custom dock, we need to create the "
"contents of such dock. This is nothing more than a standard Godot scene. "
"So you can create a new scene in the editor and start creating it."
msgstr ""

#: ../../tutorials/making_plugins.rst:185
msgid ""
"For an editor dock, it is mandatory that the root of the scene is a "
":ref:`Control <class_Control>` or one of its child classes. For this "
"tutorial, you can make a single button. The name of the root node will "
"also be the name that appears on the dock tab, so be sure to put a "
"descriptive but short one. Don't forget to add a text to your button."
msgstr ""

#: ../../tutorials/making_plugins.rst:193
msgid "Save this scene as ``my_dock.tscn``."
msgstr ""

#: ../../tutorials/making_plugins.rst:195
msgid ""
"Now you need to grab that scene you just created and add it as a dock in "
"the editor. For this you can rely on the function "
":ref:`add_control_to_dock() <class_EditorPlugin_add_control_to_dock>` "
"from the :ref:`EditorPlugin <class_EditorPlugin>` class."
msgstr ""

#: ../../tutorials/making_plugins.rst:200
msgid ""
"The code is very straightforward, you just need to select a dock position"
" to add it and have a control to add (which is the scene you just "
"created). It is also very important that you remember to **remove the "
"dock** when the plugin is deactivated. The code can be like this::"
msgstr ""

#: ../../tutorials/making_plugins.rst:225
msgid ""
"While the dock position is chosen when adding it, the user is free to "
"move it and save the layout with the dock in any position."
msgstr ""

#: ../../tutorials/making_plugins.rst:229
msgid "Checking the results"
msgstr ""

#: ../../tutorials/making_plugins.rst:231
msgid ""
"Now it is the moment to check the results of your work. Open the *Project"
" Settings* and click on the *Plugins* tab. Your plugin should be the only"
" on the list. If it is not showing, click on the *Update* button at the "
"top right corner."
msgstr ""

#: ../../tutorials/making_plugins.rst:238
msgid ""
"At the *Status* column, you can see that the plugin is inactive. So you "
"just need to click on the status to select *Active*. The dock should be "
"immediately visible, even before you close the settings window. And now, "
"lo and behold, you have a custom dock! In just a bit of coding and a "
"simple scene."
msgstr ""

#: ../../tutorials/making_plugins.rst:246
msgid "Going beyond"
msgstr ""

#: ../../tutorials/making_plugins.rst:248
msgid ""
"Now that you learned how to make basic plugins, you can extend the editor"
" in many nice ways. Many functions can be added to editor on the fly with"
" GDScript, it is a powerful way to create special editors without having "
"to delve into C++ modules."
msgstr ""

#: ../../tutorials/making_plugins.rst:253
msgid ""
"You can make your own plugins to help you and also share them in Godot's "
"Asset Library so many people can benefit of your work."
msgstr ""

