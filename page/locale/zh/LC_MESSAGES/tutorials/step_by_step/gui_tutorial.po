# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: 2016-08-24 22:40+0800\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"X-Generator: Poedit 1.8.8\n"

#: ../../tutorials/step_by_step/gui_tutorial.rst:4
msgid "GUI tutorial"
msgstr "GUI教程"

#: ../../tutorials/step_by_step/gui_tutorial.rst:7
msgid "Introduction"
msgstr "介绍"

#: ../../tutorials/step_by_step/gui_tutorial.rst:9
msgid ""
"If there is something that most programmers hate with passion, that is "
"programming graphical user interfaces (GUIs). It's boring, tedious and "
"unchallenging. Several aspects make matters worse such as:"
msgstr ""
"如果有一个东西让程序员又爱又恨，那就是编写图形用户界面(GUI，Graphical "
"User Interface)。这很枯燥、乏味还没有挑战性。还有几个方面使得事情更糟，比"
"如："

#: ../../tutorials/step_by_step/gui_tutorial.rst:13
msgid ""
"Pixel alignment of UI elements is difficult (so it looks just like the "
"designer intends)."
msgstr "像素对齐的UI元素很困难(所以它看起来就像是设计师的所拟定的)。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:15
msgid ""
"UIs are changed constantly due to design and usability issues that "
"appear during testing."
msgstr "UI会因为测试期间出现的设计和实用性的问题上一直在变。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:17
msgid "Handling proper screen re-sizing for different display resolutions."
msgstr "要为不同的显示分辨率处理适当的屏幕缩放。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:18
msgid "Animating several screen components, to make it look less static."
msgstr "为一些屏幕组件制作动画，来让它看起来不是那样的呆板。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:20
msgid ""
"GUI programming is one of the leading causes of programmer burnout. "
"During the development of Godot (and previous engine iterations), "
"several techniques and philosophies for UI development were put in "
"practice, such as immediate mode, containers, anchors, scripting, etc. "
"This was always done with the main goal of reducing the stress "
"programmers had to face while putting together user interfaces."
msgstr ""
"GUI编写是让程序员筋疲力尽的主要原因之一。在Godot(和前代引擎)的开发期间很"
"多为UI开发打造的技巧和理论得以实现，比如速成模式(Immediate Mode)、容器"
"(Container)、锚点(Anchor)、脚本等。以减轻不得不把用户界面整合到一起的程序"
"员的压力为主要目标，这些应时刻被做到。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:27
msgid ""
"In the end, the resulting UI subsystem in Godot is an efficient solution "
"to this problem, and works by mixing together a few different "
"approaches. While the learning curve is a little steeper than in other "
"toolkits, developers can put together complex user interfaces in very "
"little time, by sharing the same set of tools with designers and "
"animators."
msgstr ""
"最终，Godot的最终UI分系统是一个解决这一问题的高效解决方案。，并且通过混合"
"一些不同的方式来运作。虽然比别的工具套组的学习曲线更加的陡峭，但开发者能"
"够在短时间内把复杂的用户界面编排到一起，通过和设计师和动画师共用同一套工"
"具。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:35
msgid "Control"
msgstr "控件(Control)"

#: ../../tutorials/step_by_step/gui_tutorial.rst:37
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>` "
"(sometimes called \"Widget\" or \"Box\" in other toolkits). Every node "
"that provides user interface functionality descends from it."
msgstr ""
"(*译注：Control作为Godot节点和GDScript的基本类时不予翻译) UI元素的基本节"
"点是 Control (有时候在其他工具套组中被称为“小部件”(Widget)或"
"者“框”(Box))。每个提供用户界面功能的节点都是由他继承而来的。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:41
msgid ""
"When controls are put in a scene tree as a child of another control, "
"it's coordinates (position, size) are always relative to the parent. "
"This sets the basis for editing complex user interface quickly and "
"visually."
msgstr ""
"当Control被放在场景树中作为其他Control的子，它的坐标(位置、大小)都是相对"
"于父级的。这为快速地可视地编辑复杂用户界面打下基础。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:47
msgid "Input and drawing"
msgstr "输入和绘制"

#: ../../tutorials/step_by_step/gui_tutorial.rst:49
msgid ""
"Controls receive input events by means of the :ref:`Control."
"_input_event() <class_Control__input_event>` callback. Only one control, "
"the one in focus, will receive keyboard/joypad events (see :ref:`Control."
"set_focus_mode() <class_Control_set_focus_mode>` and :ref:`Control."
"grab_focus() <class_Control_grab_focus>`.)"
msgstr ""
"控件以\n"
":ref:`Control._input_event() <class_Control__input_event>` 回调\n"
"接收一个输入事件。只有一个控件，在焦点中的那个，将会接收键盘/手柄事件。"
"(见：:ref:`Control.set_focus_mode() <class_Control_set_focus_mode>`\n"
"和 :ref:`Control.grab_focus() <class_Control_grab_focus>`)。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:56
msgid ""
"Mouse Motion events are received by the control directly below the mouse "
"pointer. When a control receives a mouse button pressed event, all "
"subsequent motion events are received by the pressed control until that "
"button is released, even if the pointer moves outside the control "
"boundary."
msgstr ""
"鼠标活动事件被在鼠标指针下方的控件直接接收。当一个控件接收到一个鼠标按钮"
"按下事件时，所有接下来的活动事件都由被按下的控件接收直至按钮松开，即使是"
"指针已经跑到控件边界以外了。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:62
msgid ""
"Like any class that inherits from :ref:`CanvasItem <class_CanvasItem>` "
"(Control does), a :ref:`CanvasItem._draw() <class_CanvasItem__draw>` "
"callback will be received at the beginning and every time the control "
"needs to be redrawn (programmer needs to call :ref:`CanvasItem.update() "
"<class_CanvasItem_update>` to enqueue the CanvasItem for redraw). If the "
"control is not visible (yet another CanvasItem property), the control "
"does not receive any input."
msgstr ""
"像所有继承了 :ref:`CanvasItem <class_CanvasItem>` (Control也继承)的类那"
"样，一个 :ref:`CanvasItem._draw() <class_CanvasItem__draw>`\n"
"回调将会在最开始和每次控件需要重绘(Redraw)的时候被接收(程序员需要调用\n"
":ref:`CanvasItem.update() <class_CanvasItem_update>`\n"
"来入队(enqueue)供重绘的控件)。如果控件是不可见的(CanvasItem的另一种属"
"性)，那么这个控件不接受任何的输入。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:71
msgid ""
"In general though, the programmer does not need to deal with drawing and "
"input events directly when building UIs, (that is more useful when "
"creating custom controls). Instead, controls emit different kinds of "
"signals with contextual information for when action occurs. For example, "
"a :ref:`Button <class_Button>` emits a \"pressed\" signal when pressed, "
"a :ref:`Slider <class_Slider>` will emit a \"value_changed\" when "
"dragged, etc."
msgstr ""
"但总体上，程序员在搭建UI时不需要直接处理绘制和输入事件，(那对于创建自定义"
"控件时更有用)。取而代之地，控件发射各种带有对于事件何时发生的构造信息的信"
"号(Signals)。比如说一个按钮( :ref:`Button <class_Button>` )在被按下时发射"
"了一个\"pressed\"信号，一个滚动条( :ref:`Slider <class_Slider>` )将会在被"
"拖动时发射\"value_changed\"信号等。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:80
msgid "Custom control mini tutorial"
msgstr "自定义控件小教程"

#: ../../tutorials/step_by_step/gui_tutorial.rst:82
msgid ""
"Before going into more depth, creating a custom control will be a good "
"way to get the picture on how controls works, as they are not as complex "
"as it might seem."
msgstr ""
"在深入之前，创建一个自定义控件将会是一个好的方式来掌握控件工作的基本图"
"样，因为它们也许不像看起来那样复杂。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:86
msgid ""
"Additionally, even though Godot comes with dozens of controls for "
"different purposes, it happens often that it's just easier to attain a "
"specific functionality by creating a new one."
msgstr ""
"此外，尽管Godot有很多用于不同目的的控件，但通常都是通过创建一个新的会更容"
"易获取到特定的功能。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:90
msgid ""
"To begin, create a single-node scene. The node is of type \"Control\" "
"and has a certain area of the screen in the 2D editor, like this:"
msgstr ""
"首先，创建一个单节点场景。节点类型为Control，并且在2D编辑器屏幕中有某一个"
"区域，像这样："

#: ../../tutorials/step_by_step/gui_tutorial.rst:95
msgid "Add a script to that node, with the following code:"
msgstr "为那个节点添加一个脚本，写下如下代码："

#: ../../tutorials/step_by_step/gui_tutorial.rst:117
msgid ""
"Then run the scene. When the rectangle is clicked/taped, it will go from "
"blue to red. That synergy between the events and drawing is pretty much "
"how most controls work internally."
msgstr ""
"然后运行场景。当矩形被点击/触击时，它将从蓝色变为红色。这种在事件和绘制之"
"间的配合更多的是大多数控件之间如何工作。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:126
msgid "UI complexity"
msgstr "UI复杂度"

#: ../../tutorials/step_by_step/gui_tutorial.rst:128
msgid ""
"As mentioned before, Godot includes dozens of controls ready for using "
"in a user interface. Such controls are divided in two categories. The "
"first is a small set of controls that work well for creating most game "
"user interfaces. The second (and most controls are of this type) are "
"meant for complex user interfaces and uniform skinning through styles. A "
"description is presented as follows to help understand which one should "
"be used in which case."
msgstr ""
"正如前文所述，Godot准备了一系列控件用于一个用户界面中。这些控件被分为两"
"类。一个是一小部分对于创建大多数游戏用户界面都能良好运作的控件。另一种(绝"
"大多数控件属于这个类型)是打算用于复杂的用户界面和一致包装的风格。下文所呈"
"现的描述帮助理解了哪一个应当在什么场合下使用。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:137
msgid "Simplified UI controls"
msgstr "简化的UI控件"

#: ../../tutorials/step_by_step/gui_tutorial.rst:139
msgid ""
"This set of controls is enough for most games, where complex "
"interactions or ways to present information are not necessary. They can "
"be skinned easily with regular textures."
msgstr ""
"这组控件对于大多数游戏是足够的，其中复杂的互动或者呈现信息的方式并不是必"
"要的。它们能够被常规的贴图轻而易举的包装起来。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:143
msgid ":ref:`Label <class_Label>`: Node used for showing text."
msgstr "标签( :ref:`Label <class_Label>`)：用于显示文本。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:144
msgid ""
":ref:`TextureFrame <class_TextureFrame>`: Displays a single texture, "
"which can be scaled or kept fixed."
msgstr ""
"贴图框( :ref:`TextureFrame <class_TextureFrame>`)：显示单张贴图，既可以拉"
"伸也可以保持固定。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:146
msgid ""
":ref:`TextureButton <class_TextureButton>`: Displays a simple texture "
"buttons, states such as pressed, hover, disabled, etc. can be set."
msgstr ""
"贴图按钮( :ref:`TextureButton <class_TextureButton>`)：显示一个简单的带有"
"贴图的按钮，可以设置的状态有按下(Pressed)、悬停(Hover)和禁用(Disabled)"
"等。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:148
msgid ""
":ref:`TextureProgress <class_TextureProgress>`: Displays a single "
"textured progress bar."
msgstr ""
"贴图进度条( :ref:`TextureProgress <class_TextureProgress>`)：显示一个简单"
"的带有贴图的进度条。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:151
msgid ""
"Additionally, re-positioning of controls is most efficiently done with "
"anchors in this case (see the :ref:`doc_size_and_anchors` tutorial for "
"more info)."
msgstr ""
"此外，在这种情况下重新放置控件的位置利用锚点可以更高效地完成。(详情见教"
"程 :ref:`doc_size_and_anchors` )。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:155
msgid ""
"In any case, it will happen often that even for simple games, more "
"complex UI behaviors will be required. An example of this is a scrolling "
"list of elements (for a high score table, for example), which needs a :"
"ref:`ScrollContainer <class_ScrollContainer>` and a :ref:`VBoxContainer "
"<class_VBoxContainer>`. These kind of more advanced controls can be "
"mixed with the regular ones seamlessly (they are all controls anyway)."
msgstr ""
"在任何情况下，通常会有即使是对于简单的游戏，也需要更复杂的UI行为。其中一"
"个范例就是一个滚动的元素列表(比如对于一个高分列表)，这可能需要一个滚动容"
"器( :ref:`ScrollContainer <class_ScrollContainer>`)和一个纵向容器框( :"
"ref:`VBoxContainer <class_VBoxContainer>`)。这种更为高级的控件可以和常规"
"的控件天衣无缝地结合在一起(不管怎么说他们都是控件)。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:164
msgid "Complex UI controls"
msgstr "复杂的UI控件"

#: ../../tutorials/step_by_step/gui_tutorial.rst:166
msgid ""
"The rest of the controls (and there are dozens of them!) are meant for "
"another set of scenarios, most commonly:"
msgstr "其余的控件(有一大堆呢！)是为另一系列场合准备的，最通常地："

#: ../../tutorials/step_by_step/gui_tutorial.rst:169
msgid ""
"Games that require complex UIs, such as PC RPGs, MMOs, strategy, sims, "
"etc."
msgstr ""
"需要复杂UI的游戏，比如PC RPG(Role Playing Game角色扮演)游戏、"
"MMO(Massively Multiplayer Online，大型多人在线)游戏、策略类游戏、模拟类游"
"戏等。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:171
msgid "Creating custom development tools to speed up content creation."
msgstr "创建自定义的开发工具可以加速内容创作"

#: ../../tutorials/step_by_step/gui_tutorial.rst:172
msgid "Creating Godot Editor Plugins, to extend the engine functionality."
msgstr "创建Godot编辑器插件(Editor Plugins)来扩展引擎的功能。"

#: ../../tutorials/step_by_step/gui_tutorial.rst:174
msgid ""
"Re-positioning controls for these kind of interfaces is more commonly "
"done with containers (see the :ref:`doc_size_and_anchors` tutorial for "
"more info)."
msgstr ""
"为这些类型的界面重新布置控件通常由容器完成(详情见教程 :ref:"
"`doc_size_and_anchors`)。"
