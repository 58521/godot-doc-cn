# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/step_by_step/gui_tutorial.rst:4
msgid "GUI tutorial"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:7
msgid "Introduction"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:9
msgid ""
"If there is something that most programmers hate with passion, that is "
"programming graphical user interfaces (GUIs). It's boring, tedious and "
"unchallenging. Several aspects make matters worse such as:"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:13
msgid ""
"Pixel alignment of UI elements is difficult (so it looks just like the "
"designer intends)."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:15
msgid ""
"UIs are changed constantly due to design and usability issues that appear"
" during testing."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:17
msgid "Handling proper screen re-sizing for different display resolutions."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:18
msgid "Animating several screen components, to make it look less static."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:20
msgid ""
"GUI programming is one of the leading causes of programmer burnout. "
"During the development of Godot (and previous engine iterations), several"
" techniques and philosophies for UI development were put in practice, "
"such as immediate mode, containers, anchors, scripting, etc. This was "
"always done with the main goal of reducing the stress programmers had to "
"face while putting together user interfaces."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:27
msgid ""
"In the end, the resulting UI subsystem in Godot is an efficient solution "
"to this problem, and works by mixing together a few different approaches."
" While the learning curve is a little steeper than in other toolkits, "
"developers can put together complex user interfaces in very little time, "
"by sharing the same set of tools with designers and animators."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:35
msgid "Control"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:37
msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>` "
"(sometimes called \"Widget\" or \"Box\" in other toolkits). Every node "
"that provides user interface functionality descends from it."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:41
msgid ""
"When controls are put in a scene tree as a child of another control, it's"
" coordinates (position, size) are always relative to the parent. This "
"sets the basis for editing complex user interface quickly and visually."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:47
msgid "Input and drawing"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:49
msgid ""
"Controls receive input events by means of the "
":ref:`Control._input_event() <class_Control__input_event>` callback. Only"
" one control, the one in focus, will receive keyboard/joypad events (see "
":ref:`Control.set_focus_mode() <class_Control_set_focus_mode>` and "
":ref:`Control.grab_focus() <class_Control_grab_focus>`.)"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:56
msgid ""
"Mouse Motion events are received by the control directly below the mouse "
"pointer. When a control receives a mouse button pressed event, all "
"subsequent motion events are received by the pressed control until that "
"button is released, even if the pointer moves outside the control "
"boundary."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:62
msgid ""
"Like any class that inherits from :ref:`CanvasItem <class_CanvasItem>` "
"(Control does), a :ref:`CanvasItem._draw() <class_CanvasItem__draw>` "
"callback will be received at the beginning and every time the control "
"needs to be redrawn (programmer needs to call :ref:`CanvasItem.update() "
"<class_CanvasItem_update>` to enqueue the CanvasItem for redraw). If the "
"control is not visible (yet another CanvasItem property), the control "
"does not receive any input."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:71
msgid ""
"In general though, the programmer does not need to deal with drawing and "
"input events directly when building UIs, (that is more useful when "
"creating custom controls). Instead, controls emit different kinds of "
"signals with contextual information for when action occurs. For example, "
"a :ref:`Button <class_Button>` emits a \"pressed\" signal when pressed, a"
" :ref:`Slider <class_Slider>` will emit a \"value_changed\" when dragged,"
" etc."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:80
msgid "Custom control mini tutorial"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:82
msgid ""
"Before going into more depth, creating a custom control will be a good "
"way to get the picture on how controls works, as they are not as complex "
"as it might seem."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:86
msgid ""
"Additionally, even though Godot comes with dozens of controls for "
"different purposes, it happens often that it's just easier to attain a "
"specific functionality by creating a new one."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:90
msgid ""
"To begin, create a single-node scene. The node is of type \"Control\" and"
" has a certain area of the screen in the 2D editor, like this:"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:95
msgid "Add a script to that node, with the following code:"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:117
msgid ""
"Then run the scene. When the rectangle is clicked/taped, it will go from "
"blue to red. That synergy between the events and drawing is pretty much "
"how most controls work internally."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:126
msgid "UI complexity"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:128
msgid ""
"As mentioned before, Godot includes dozens of controls ready for using in"
" a user interface. Such controls are divided in two categories. The first"
" is a small set of controls that work well for creating most game user "
"interfaces. The second (and most controls are of this type) are meant for"
" complex user interfaces and uniform skinning through styles. A "
"description is presented as follows to help understand which one should "
"be used in which case."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:137
msgid "Simplified UI controls"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:139
msgid ""
"This set of controls is enough for most games, where complex interactions"
" or ways to present information are not necessary. They can be skinned "
"easily with regular textures."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:143
msgid ":ref:`Label <class_Label>`: Node used for showing text."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:144
msgid ""
":ref:`TextureFrame <class_TextureFrame>`: Displays a single texture, "
"which can be scaled or kept fixed."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:146
msgid ""
":ref:`TextureButton <class_TextureButton>`: Displays a simple texture "
"buttons, states such as pressed, hover, disabled, etc. can be set."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:148
msgid ""
":ref:`TextureProgress <class_TextureProgress>`: Displays a single "
"textured progress bar."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:151
msgid ""
"Additionally, re-positioning of controls is most efficiently done with "
"anchors in this case (see the :ref:`doc_size_and_anchors` tutorial for "
"more info)."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:155
msgid ""
"In any case, it will happen often that even for simple games, more "
"complex UI behaviors will be required. An example of this is a scrolling "
"list of elements (for a high score table, for example), which needs a "
":ref:`ScrollContainer <class_ScrollContainer>` and a :ref:`VBoxContainer "
"<class_VBoxContainer>`. These kind of more advanced controls can be mixed"
" with the regular ones seamlessly (they are all controls anyway)."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:164
msgid "Complex UI controls"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:166
msgid ""
"The rest of the controls (and there are dozens of them!) are meant for "
"another set of scenarios, most commonly:"
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:169
msgid ""
"Games that require complex UIs, such as PC RPGs, MMOs, strategy, sims, "
"etc."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:171
msgid "Creating custom development tools to speed up content creation."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:172
msgid "Creating Godot Editor Plugins, to extend the engine functionality."
msgstr ""

#: ../../tutorials/step_by_step/gui_tutorial.rst:174
msgid ""
"Re-positioning controls for these kind of interfaces is more commonly "
"done with containers (see the :ref:`doc_size_and_anchors` tutorial for "
"more info)."
msgstr ""

