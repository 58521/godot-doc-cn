# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: 2016-08-24 23:10+0800\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"X-Generator: Poedit 1.8.8\n"

#: ../../tutorials/step_by_step/scripting_continued.rst:4
msgid "Scripting (continued)"
msgstr "脚本(续)"

#: ../../tutorials/step_by_step/scripting_continued.rst:7
msgid "Processing"
msgstr "处理"

#: ../../tutorials/step_by_step/scripting_continued.rst:9
msgid ""
"Several actions in Godot are triggered by callbacks or virtual functions, so "
"there is no need to check for writing code that runs all the time. "
"Additionally, a lot can be done with animation players."
msgstr ""
"在Godot中一些动作由回调函数或虚函数触发，所以没必要去检查持续执行的代码。不仅如"
"此，很多都能够用动画播放器（Animation Player）来完成。"

#: ../../tutorials/step_by_step/scripting_continued.rst:13
msgid ""
"However, it is still a very common case to have a script process on every "
"frame. There are two types of processing, idle processing and fixed processing."
msgstr ""
"然而，有一个脚本在每一帧进行处理依旧是一个常见情况。有两种处理方式，空闲处理"
"（Idle Processing）和固定处理（Fixed Processing）。"

#: ../../tutorials/step_by_step/scripting_continued.rst:17
msgid ""
"Idle processing is activated with the :ref:`Node.set_process() "
"<class_Node_set_process>` function. Once active, the :ref:`Node._process() "
"<class_Node__process>` callback will be called every frame. Example:"
msgstr ""
"空闲处理由:ref:`Node.set_process() <class_Node_set_process>`函数激活。一旦激"
"活， :ref:`Node._process() <class_Node__process>` 回调将会在每一帧被调用。举个"
"例子"

#: ../../tutorials/step_by_step/scripting_continued.rst:30
msgid ""
"The delta parameter describes the time elapsed (in seconds, as floating point) "
"since the previous call to _process(). Fixed processing is similar, but only "
"needed for synchronization with the physics engine."
msgstr ""
"参数delta描述了从上一次回调_process()到现在的持续时间（以秒为单位，为浮点数）。"
"固定处理也是相似的，但只在和物理引擎同步的时候才会用到。"

#: ../../tutorials/step_by_step/scripting_continued.rst:35
msgid ""
"A simple way to test this is to create a scene with a single Label node, with "
"the following script:"
msgstr ""
"验证这件事的一个简单方式就是去创建一个包含一个带有如下脚本的标签节点的场景："

#: ../../tutorials/step_by_step/scripting_continued.rst:51
msgid "Which will show a counter increasing each second."
msgstr "这将会显示一个每秒递增的计数器。"

#: ../../tutorials/step_by_step/scripting_continued.rst:54
msgid "Groups"
msgstr "分组（Groups）"

#: ../../tutorials/step_by_step/scripting_continued.rst:56
msgid ""
"Nodes can be added to groups (as many as desired per node). This is a simple "
"yet useful feature for organizing large scenes. There are two ways to do this, "
"the first is from the UI, from the Groups button:"
msgstr ""
"节点可以被添加到组里（每个节点根据需要可以尽可能多的添加）。这对于组织大型场景"
"是一个简单的但是很有用的特性。有两种方式能够做到这点，第一个就是通过UI，在"
"Groups按钮（Groups button）中："

#: ../../tutorials/step_by_step/scripting_continued.rst:62
msgid ""
"And the second from code. One useful example would be, for example, to tag "
"scenes which are enemies."
msgstr "而另一种就是通过代码。比如，下面就一个很有用的范例来标记作为敌人的场景。"

#: ../../tutorials/step_by_step/scripting_continued.rst:70
msgid ""
"This way, if the player, sneaking into the secret base, is discovered, all "
"enemies can be notified about the alarm sounding, by using :ref:`SceneTree."
"call_group() <class_SceneTree_call_group>`:"
msgstr ""
"以这种方式，如果在秘密基地里乱跑的玩家被发现了，通过使用:ref:`SceneTree."
"call_group() <class_SceneTree_call_group>`:，所有的敌人都能够注意到警报的响起，"

#: ../../tutorials/step_by_step/scripting_continued.rst:79
msgid ""
"The above code calls the function \"player_was_discovered\" on every member of "
"the group \"guards\"."
msgstr ""
"上述代码将会调用在组\"guards\"里面所有成员上的函数\"player_was_discovered\"。"

#: ../../tutorials/step_by_step/scripting_continued.rst:82
msgid ""
"Optionally, it is possible to get the full list of \"guards\" nodes by "
"calling :ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_get_nodes_in_group>`:"
msgstr ""
"可选地，你也可以获取到\"guards\"节点的完整列表，通过调用:ref:`SceneTree."
"get_nodes_in_group() <class_SceneTree_get_nodes_in_group>`:"

#: ../../tutorials/step_by_step/scripting_continued.rst:90
msgid "More will be added about :ref:`SceneTree <class_SceneTree>` later."
msgstr "更多关于:ref:`SceneTree <class_SceneTree>`的内容将会在后面加入"

#: ../../tutorials/step_by_step/scripting_continued.rst:95
msgid "Notifications"
msgstr "事件通知（Notifications）"

#: ../../tutorials/step_by_step/scripting_continued.rst:97
msgid ""
"Godot has a system of notifications. This is usually not needed to be used "
"from scripting, as it's too low level and virtual functions are provided for "
"most of them. It's just good to know they exists. Simply add a :ref:`Object."
"_notification() <class_Object__notification>` function in your script:"
msgstr ""
"Godot还有一个通知系统，这通常不需要从脚本中调用，因为他们太低层了并且虚函数能够"
"提供他们中的绝大部分。你只消知道他们存在就可以了。在你的脚本中单纯添加一个:ref:"
"`Object._notification() <class_Object__notification>`函数： "

#: ../../tutorials/step_by_step/scripting_continued.rst:113
msgid ""
"The documentation of each class in the :ref:`Class Reference <toc-class-ref>` "
"shows the notifications it can receive. However, again, for most cases script "
"provides simpler overrideable functions."
msgstr ""
"在 :ref:`Class Reference <toc-class-ref>` 中关于每个类（Class）的文档显示了他能"
"接收到的通知。然而，还是，对于大多数的情形下，脚本提供了更简单的可重载函数。"

#: ../../tutorials/step_by_step/scripting_continued.rst:118
msgid "Overrideable functions"
msgstr "可重载函数（Overrideable Functions）"

#: ../../tutorials/step_by_step/scripting_continued.rst:120
msgid ""
"As mentioned before, it's better to use these functions. Nodes provide many "
"useful overrideable functions, which are described as follows:"
msgstr ""
"正如前文所述，最好去使用这些函数。节点提供了许多有用的可重载函数，其被如下描"
"述："

#: ../../tutorials/step_by_step/scripting_continued.rst:163
msgid "Creating nodes"
msgstr "创建节点"

#: ../../tutorials/step_by_step/scripting_continued.rst:165
msgid ""
"To create a node from code, just call the .new() method, (like for any other "
"class based datatype). Example:"
msgstr ""
"为了通过代码来创建一个节点，只需要调用.new()方法即可，（就像其余的基于类的数据"
"类型），比如说："

#: ../../tutorials/step_by_step/scripting_continued.rst:175
msgid "To delete a node, be it inside or outside the scene, free() must be used:"
msgstr "欲删除一个节点，无论在场景内外，free()都必须被使用："

#: ../../tutorials/step_by_step/scripting_continued.rst:183
msgid ""
"When a node is freed, it also frees all its children nodes. Because of this, "
"manually deleting nodes is much simpler than it appears. Just free the base "
"node and everything else in the sub-tree goes away with it."
msgstr ""
"当节点被释放（Free）后，它也将释放所有的子节点。由于这一点，手动删除节点比让它"
"出现是更简单的。只需要释放基节点（Base Node）继而在分支树下的所有东西都将随之消"
"失。"

#: ../../tutorials/step_by_step/scripting_continued.rst:187
msgid ""
"However, it might happen very often that we might want to delete a node that "
"is currently \"blocked\" this means, the node is emitting a signal or calling "
"a function. This will result in crashing the game. Running Godot in the "
"debugger often will catch this case and warn you about it."
msgstr ""
"然而，这可能是一种普遍情况，我们可能想要去删除一个当前被“封锁”的节点，就是这个"
"节点正在发射信号（Signals）或者在调用一个函数。这就会导致游戏崩溃。在调试器"
"（Debugger）中运行Godot通常会捕获（Catch）这个情况并且警告你。"

#: ../../tutorials/step_by_step/scripting_continued.rst:192
msgid ""
"The safest way to delete a node is by using :ref:`Node.queue_free() "
"<class_Node_queue_free>` instead. This erases the node during idle, safely."
msgstr ""
"删除节点的最安全的方式就是去使用:ref:`Node.queue_free() "
"<class_Node_queue_free>`作为替代。这会在闲置时安全地删除这个节点。"

#: ../../tutorials/step_by_step/scripting_continued.rst:202
msgid "Instancing scenes"
msgstr "场景的实例化"

#: ../../tutorials/step_by_step/scripting_continued.rst:204
msgid ""
"Instancing a scene from code is pretty easy and done in two steps. The first "
"one is to load the scene from disk."
msgstr ""
"通过代码来实例化一个场景是相当简单的并且在两步内就能完成。第一步就是从磁盘载入"
"场景。"

#: ../../tutorials/step_by_step/scripting_continued.rst:211
msgid ""
"Preloading it can be more convenient sometimes, as it happens at parse time."
msgstr "有时预加载会更方便，因为它发生在语义解析（Parse）期间。"

#: ../../tutorials/step_by_step/scripting_continued.rst:218
msgid ""
"But 'scene' is still not a node containing subnodes. It's packed in a special "
"resource called :ref:`PackedScene <class_PackedScene>`. To create the actual "
"node, the function :ref:`PackedScene.instance() <class_PackedScene_instance>` "
"must be called. This will return the tree of nodes that can be added to the "
"active scene:"
msgstr ""
"但是 'scene' 依旧不是一个包含着子节点的节点。它被封装在一个特殊的资源叫做 :ref:"
"`封装场景 <class_PackedScene>` 。为了创建实际的节点，函数:ref:`PackedScene."
"instance() <class_PackedScene_instance>`必须被调用。这将会返回可以添加到活动场"
"景中的节点树："

#: ../../tutorials/step_by_step/scripting_continued.rst:230
msgid ""
"The advantage of this two-step process is that a packed scene may be kept "
"loaded and ready to use, so it can be used to create as many instances as "
"desired. This is specially useful, for example, to instance several enemies, "
"bullets, etc. quickly in the active scene."
msgstr ""
"这两步处理的优势在于一个封装的场景可能会持续地加载并准备就绪，所以它可以被用于"
"创建尽可能多的实例。这特别地有用，比如说，用来在活动场景中快速地实例化一些敌"
"人、子弹等。"
