# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/step_by_step/filesystem.rst:4
msgid "File system"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:7
msgid "Introduction"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:9
msgid ""
"File systems are yet another hot topic in engine development. The file "
"system manages how the assets are stored, and how they are accessed. A "
"well designed file system also allows multiple developers to edit the "
"same source files and assets while collaborating together."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:14
msgid ""
"Initial versions of the Godot engine (and previous iterations before it "
"was named Godot) used a database. Assets were stored in it and assigned "
"an ID. Other approaches were tried as well, such as local databases, "
"files with metadata, etc. In the end the simple approach won and now "
"Godot stores all assets as files in the file system."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:21
msgid "Implementation"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:23
msgid ""
"The file system stores resources on disk. Anything, from a script, to a "
"scene or a PNG image is a resource to the engine. If a resource contains "
"properties that reference other resources on disk, the paths to those "
"resources are also included. If a resource has sub-resources that are "
"built-in, the resource is saved in a single file together with all the "
"bundled sub-resources. For example, a font resource is often bundled "
"together with the font textures."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:30
msgid ""
"In general the the Godot file system avoids using metadata files. The "
"reason for this is simple, existing asset managers and VCSs are just much"
" better than anything we can implement, so Godot tries the best to play "
"along with SVN, Git, Mercurial, Perforce, etc."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:35
msgid "Example of a file system contents:"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:46
msgid "engine.cfg"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:48
msgid ""
"The engine.cfg file is the project description file, and it is always "
"found at the root of the project, in fact it's location defines where the"
" root is. This is the first file that Godot looks for when opening a "
"project."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:52
msgid ""
"This file contains the project configuration in plain text, using the "
"win.ini format. Even an empty engine.cfg can function as a basic "
"definition of a blank project."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:57
msgid "Path delimiter"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:59
msgid ""
"Godot only supports ``/`` as a path delimiter. This is done for "
"portability reasons. All operating systems support this, even Windows, so"
" a path such as ``c:\\project\\engine.cfg`` needs to be typed as "
"``c:/project/engine.cfg``."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:65
msgid "Resource path"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:67
msgid ""
"When accessing resources, using the host OS file system layout can be "
"cumbersome and non-portable. To solve this problem, the special path "
"``res://`` was created."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:71
msgid ""
"The path ``res://`` will always point at the project root (where "
"engine.cfg is located, so in fact ``res://engine.cfg`` is always valid)."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:75
msgid ""
"This file system is read-write only when running the project locally from"
" the editor. When exported or when running on different devices (such as "
"phones or consoles, or running from DVD), the file system will become "
"read-only and writing will no longer be permitted."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:81
msgid "User path"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:83
msgid ""
"Writing to disk is still often needed for various tasks such as saving "
"game state or downloading content packs. To this end, the engine ensures "
"that there is a special path ``user://`` that is always writable."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:88
msgid "Host file system"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:90
msgid ""
"Alternatively host file system paths can also be used, but this is not "
"recommended for a released product as these paths are not guaranteed to "
"work on all platforms. However, using host file system paths can be very "
"useful when writing development tools in Godot!"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:96
msgid "Drawbacks"
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:98
msgid ""
"There are some drawbacks to this simple file system design. The first "
"issue is that moving assets around (renaming them or moving them from one"
" path to another inside the project) will break existing references to "
"these assets. These references will have to be re-defined to point at the"
" new asset location."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:103
msgid ""
"The second is that under Windows and OSX file and path names are case "
"insensitive. If a developer working in a case insensitive host file "
"system saves an asset as \"myfile.PNG\", but then references it as "
"\"myfile.png\", it will work just fine on their platorm, but not on other"
" platforms, such as Linux, Android, etc. This may also apply to exported "
"binaries, which use a compressed package to store all files."
msgstr ""

#: ../../tutorials/step_by_step/filesystem.rst:109
msgid ""
"It is recommend that your team clearly defines a naming convention for "
"files when working with Godot! One simple fool-proof convention is to "
"only allow lowercase file and path names."
msgstr ""

