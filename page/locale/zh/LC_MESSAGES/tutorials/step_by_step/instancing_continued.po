# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/step_by_step/instancing_continued.rst:4
msgid "Instancing (continued)"
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:7
msgid "Recap"
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:9
msgid "Instancing has many handy uses. At a glance, with instancing you have:"
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:11
msgid "The ability to subdivide scenes and make them easier to manage."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:12
msgid ""
"A more flexible alternative to prefabs (and much more powerful given "
"instances work at many levels)."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:14
msgid ""
"A way to design more complex game flows or even UIs (UI Elements are "
"nodes in Godot too)."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:18
msgid "Design language"
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:20
msgid ""
"But the real strong point of instancing scenes is that it works as an "
"excellent design language. This is pretty much what makes Godot special "
"and different to any other engine out there. The entire engine was "
"designed from the ground up around this concept."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:25
msgid ""
"When making games with Godot, the recommended approach is to leave aside "
"other design patterns such as MVC or Entity-Relationship diagrams and "
"start thinking games in a more natural way. Start by imagining the "
"visible elements in a game, the ones that can be named not by just a "
"programmer but by anyone."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:31
msgid "For example, here's how a simple shooter game can be imagined:"
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:35
msgid ""
"It's pretty easy to come up with a diagram like this for almost any kind "
"of game. Just write down the elements that come to mind, and then the "
"arrows that represent ownership."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:39
msgid ""
"Once this diagram exists, making a game is about creating a scene for "
"each of those nodes, and use instancing (either by code or from the "
"editor) to represent ownership."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:42
msgid ""
"Most of the time programming games (or software in general) is spent "
"designing an architecture and fitting game components to that "
"architecture. Designing based on scenes replaces that and makes "
"development much faster and more straightforward, allowing to concentrate"
" on the game itself. Scene/Instancing based design is extremely efficient"
" at saving a large part of that work, since most of the components "
"designed map directly to a scene. This way, none or little architectural "
"code is needed."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:51
msgid ""
"The following is a more complex example, an open-world type of game with "
"lots of assets and parts that interact:"
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:56
msgid ""
"Make some rooms with furniture, then connect them. Make a house later, "
"and use those rooms as the interior."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:59
msgid ""
"The house can be part of a citadel, which has many houses. Finally the "
"citadel can be put on the world map terrain. Add also guards and other "
"NPCs to the citadel by previously creating their scenes."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:63
msgid ""
"With Godot, games can grow as quickly as desired, as only more scenes "
"have to be made and instanced. The editor UI is also designed to be "
"operated by non programmers too, so an usual team development process "
"involves 3D or 2D artists, level designers, game designers, animators, "
"etc all working with the editor interface."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:70
msgid "Information overload!"
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:72
msgid ""
"Do not worry too much, the important part of this tutorial is to create "
"awareness on how scenes and instancing are used in real life. The best "
"way to understand all this is to make some games."
msgstr ""

#: ../../tutorials/step_by_step/instancing_continued.rst:76
msgid ""
"Everything will become very obvious when put to practice, so, please do "
"not scratch your head and go on to the next tutorial!"
msgstr ""

