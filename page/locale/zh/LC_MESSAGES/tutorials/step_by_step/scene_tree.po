# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/step_by_step/scene_tree.rst:4
#: ../../tutorials/step_by_step/scene_tree.rst:43
msgid "SceneTree"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:7
msgid "Introduction"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:9
msgid ""
"This is where things start getting abstract, but don't panic, as there's "
"not really more depth than this."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:12
msgid ""
"In previous tutorials, everything revolves around the concept of Nodes, "
"scenes are made of them, and they become active once they enter the "
"*scene tree*."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:16
msgid ""
"This deserves going a little more into depth. In fact, the scene system "
"is not even a core component of Godot, as it is possible to skip it and "
"make a script (or C++ code) that talks directly to the servers. But "
"making a game that way would be a lot of work and is reserved for other "
"uses."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:23
msgid "MainLoop"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:25
msgid ""
"The way Godot works internally is as follows. There is the the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning."
" Afterwards, all drivers, servers, scripting languages, scene system, etc"
" are loaded."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:30
msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be "
"supplied a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all"
" this is internals working (you can check main/main.cpp file in the "
"source code if you are ever interested to see how this works internally)."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:36
msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-syncronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is really low "
"level and when making games in Godot, writing your own MainLoop does not "
"even make sense."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:45
msgid ""
"One of the ways to explain how Godot works, is that it's a high level "
"game engine over a low level middleware."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:48
msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:51
msgid ""
"In any case, the scene system provides it's own main loop to OS, "
":ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:54
msgid ""
"This is automatically instanced and set when running a scene, no need to "
"do any extra work."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:57
msgid ""
"It's important to know that this class exists because it has a few "
"important uses:"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:60
msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, when a scene is "
"first opened, it's added as a child of it to become part of the *Scene "
"Tree* (more on that next)"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:63
msgid ""
"It contains information about the groups, and has means to call all nodes"
" in a group, or get a list of them."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:65
msgid ""
"It contains some global state functionality, such as setting pause mode, "
"or quitting the process."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:68
msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by simply calling "
":ref:`Node.get_tree() <class_Node_get_tree>`."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:74
msgid "Root viewport"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:76
msgid ""
"The root :ref:`Viewport <class_Viewport>` is always a top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:85
msgid ""
"This node contains the main viewport, anything that is a child of a "
":ref:`Viewport <class_Viewport>` is drawn inside of it by default, so it "
"makes sense that the top of all nodes is always a node of this type, "
"otherwise nothing would be seen!"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:90
msgid ""
"While other viewports can be created in the scene (for split-screen "
"effects and such), this one is the only one that is never created by the "
"user. It's created automatically inside SceneTree."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:95
msgid "Scene tree"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:97
msgid ""
"When a node is connected, directly or indirectly, to the root viewport, "
"it becomes part of the *scene tree*."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:100
msgid ""
"This means that, as explained in previous tutorials, will get the "
"_enter_tree() and _ready() callbacks (as well as _exit_tree())."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:105
msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to"
" everything they need to process, get input, display 2D and 3D, "
"notifications, play sound, groups, etc. When they are removed from the "
"*scene tree*, they lose it."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:111
msgid "Tree order"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:113
msgid ""
"Most node operations in Godot, such as drawing 2D, processing or getting "
"notifications are done in tree order. This means that parents and "
"siblings with less order will get notified before the current node."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:120
msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:122
msgid "A scene is loaded from disk or created by scripting."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:123
msgid ""
"The root node of that scene (only one root, remember?) is added as either"
" a child of the \"root\" Viewport (from SceneTree), or to any child or "
"grand-child of it."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:126
msgid ""
"Every node of the newly added scene, will receive the \"enter_tree\" "
"notification ( _enter_tree() callback in GDScript) in top-to-bottom "
"order."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:129
msgid ""
"An extra notification, \"ready\" ( _ready() callback in GDScript) is "
"provided for convenience, when a node and all its children are inside the"
" active scene."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:132
msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:137
msgid "Changing current scene"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:139
msgid ""
"After a scene is loaded, it is often desired to change this scene for "
"another one. The simple way to do this to use the "
":ref:`SceneTree.change_scene() <class_SceneTree_change_scene>` function:"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:149
msgid ""
"This is a quick and useful way to switch scenes, but has the drawback "
"that the game will stall until the new scene is loaded and running. At "
"some point in your game, it may be desired to create proper loading "
"screens with progress bar, animated indicators or thread (background) "
"loading. This must be done manually using autoloads (see next chapter!) "
"and :ref:`doc_background_loading`."
msgstr ""

