# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: 2016-08-24 22:56+0800\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"X-Generator: Poedit 1.8.8\n"

#: ../../tutorials/step_by_step/scene_tree.rst:4
#: ../../tutorials/step_by_step/scene_tree.rst:43
msgid "SceneTree"
msgstr "场景树(Scene Tree)"

#: ../../tutorials/step_by_step/scene_tree.rst:7
msgid "Introduction"
msgstr "介绍"

#: ../../tutorials/step_by_step/scene_tree.rst:9
msgid ""
"This is where things start getting abstract, but don't panic, as there's "
"not really more depth than this."
msgstr ""
"(译注：SceneTree作为类名时不予翻译) 从这里开始事情开始越来越抽象，但是别"
"担心，因为深奥的东西也不过如此了。"

#: ../../tutorials/step_by_step/scene_tree.rst:12
msgid ""
"In previous tutorials, everything revolves around the concept of Nodes, "
"scenes are made of them, and they become active once they enter the "
"*scene tree*."
msgstr ""
"在上篇教程中，所有东西都围绕着节点(Node)的概念，场景(Scene)由它们构成，并"
"且它们一旦进入了”场景树”中它们就开始变得活跃了。"

#: ../../tutorials/step_by_step/scene_tree.rst:16
msgid ""
"This deserves going a little more into depth. In fact, the scene system "
"is not even a core component of Godot, as it is possible to skip it and "
"make a script (or C++ code) that talks directly to the servers. But "
"making a game that way would be a lot of work and is reserved for other "
"uses."
msgstr ""
"这应该更深入一些。事实上，场景系统甚至都不是Godot中的核心部分，因为它是可"
"以被跳过然后做个脚本(或者C++代码)直接访问伺服器(Server,本篇的Server只指代"
"伺服器，而不指代网络上的服务器，网络服务器会在联网等相关章节中具体标注)。"
"但是那样制作游戏将会有很大工作量并且也是为其他用途预留的。"

#: ../../tutorials/step_by_step/scene_tree.rst:23
msgid "MainLoop"
msgstr "主循环(MainLoop类)"

#: ../../tutorials/step_by_step/scene_tree.rst:25
msgid ""
"The way Godot works internally is as follows. There is the the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the "
"beginning. Afterwards, all drivers, servers, scripting languages, scene "
"system, etc are loaded."
msgstr ""
"Godot内部工作原理如下。有一个 :ref:`OS <class_OS>` 类(Class)，是唯一一个"
"在最开始就运行的实例。之后所有的驱动器、伺服器、脚本语言、场景系统等都被"
"载入了。"

#: ../../tutorials/step_by_step/scene_tree.rst:30
msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be "
"supplied a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, "
"all this is internals working (you can check main/main.cpp file in the "
"source code if you are ever interested to see how this works internally)."
msgstr ""
"当初始化完成后 :ref:`OS <class_OS>` 需要被提供一个 :ref:`MainLoop "
"<class_MainLoop>`来运行。截止到此，所有的这些是在内部完成的(如果你对内部"
"工作原理感兴趣的话，你可以检验源代码中的main/main.cpp文件)"

#: ../../tutorials/step_by_step/scene_tree.rst:36
msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-syncronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is really low "
"level and when making games in Godot, writing your own MainLoop does not "
"even make sense."
msgstr ""
"用户系统，或者游戏，在MainLoop中开始。这个类有一些方法(Method)，用于初始"
"化(Initialization)、闲置(Idle)(帧同步回调,freame-synchronized callback)、"
"以及输入(Input)。同样地，这很低级而且在Godot中制作游戏时，写你自己的"
"MainLoop根本没什么意义。"

#: ../../tutorials/step_by_step/scene_tree.rst:45
msgid ""
"One of the ways to explain how Godot works, is that it's a high level "
"game engine over a low level middleware."
msgstr ""
"解释Godot如何工作的方式之一，那就是它是一个在一个低级中间件基础上的高级游"
"戏引擎。"

#: ../../tutorials/step_by_step/scene_tree.rst:48
msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""
"场景系统就是游戏引擎，而 :ref:`OS <class_OS>`和伺服器就是低级应用程序接口"
"(API,Application Plugin Interface)。"

#: ../../tutorials/step_by_step/scene_tree.rst:51
msgid ""
"In any case, the scene system provides it's own main loop to OS, :ref:"
"`SceneTree <class_SceneTree>`."
msgstr ""
"无论何时，场景系统为OS、 :ref:`SceneTree <class_SceneTree>` 提供了自己的"
"主循环。"

#: ../../tutorials/step_by_step/scene_tree.rst:54
msgid ""
"This is automatically instanced and set when running a scene, no need to "
"do any extra work."
msgstr "在运行一个场景时，这是被自动实例化并设定的，无需再做额外的事情。"

#: ../../tutorials/step_by_step/scene_tree.rst:57
msgid ""
"It's important to know that this class exists because it has a few "
"important uses:"
msgstr "知道一个类的存在是很重要的因为它有如下重要的用处："

#: ../../tutorials/step_by_step/scene_tree.rst:60
msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, when a scene is "
"first opened, it's added as a child of it to become part of the *Scene "
"Tree* (more on that next)"
msgstr ""
"它包含了根 :ref:`Viewport <class_Viewport>`，当一个场景第一次被打开时，它"
"被添加为它的一个子并成为了 *场景树* 的一部分。(具体内容在后文)"

#: ../../tutorials/step_by_step/scene_tree.rst:63
msgid ""
"It contains information about the groups, and has means to call all "
"nodes in a group, or get a list of them."
msgstr ""
"它包含了关于组(Group)的信息，并且能够调用组内的所有节点，或者获取到它们的"
"列表。"

#: ../../tutorials/step_by_step/scene_tree.rst:65
msgid ""
"It contains some global state functionality, such as setting pause mode, "
"or quitting the process."
msgstr "它还包含一些全局级别的功能，比如设定暂停模式或者退出进程等。"

#: ../../tutorials/step_by_step/scene_tree.rst:68
msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by simply calling :ref:"
"`Node.get_tree() <class_Node_get_tree>`."
msgstr ""
"当一个节点是场景树的一部分时，:ref:`SceneTree <class_SceneTree>`单例类能"
"够通过只调用:ref:`Node.get_tree() <class_Node_get_tree>`来被获取到。"

#: ../../tutorials/step_by_step/scene_tree.rst:74
msgid "Root viewport"
msgstr "根视野(Root Viewport)"

#: ../../tutorials/step_by_step/scene_tree.rst:76
msgid ""
"The root :ref:`Viewport <class_Viewport>` is always a top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""
"根:ref:`视野(Viewport) <class_Viewport>`总是在场景的最顶端，通过一个节点"
"它能够以两种不同的方式被获取到。"

#: ../../tutorials/step_by_step/scene_tree.rst:85
msgid ""
"This node contains the main viewport, anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it "
"makes sense that the top of all nodes is always a node of this type, "
"otherwise nothing would be seen!"
msgstr ""
"这个节点包含了主要视野，所有作为:ref:`Viewport <class_Viewport>`子的东西"
"默认被绘制在它里面，所以所有节点的顶端总是这个类型是有很重要的，否则什么"
"也看不见！"

#: ../../tutorials/step_by_step/scene_tree.rst:90
msgid ""
"While other viewports can be created in the scene (for split-screen "
"effects and such), this one is the only one that is never created by the "
"user. It's created automatically inside SceneTree."
msgstr ""
"比较于其他的视野能够被创建在场景中(用来做分屏效果和此类的东西)，这个根视"
"野是永远不会被用户所创建的。它在场景树中被自动创建。"

#: ../../tutorials/step_by_step/scene_tree.rst:95
msgid "Scene tree"
msgstr "场景树"

#: ../../tutorials/step_by_step/scene_tree.rst:97
msgid ""
"When a node is connected, directly or indirectly, to the root viewport, "
"it becomes part of the *scene tree*."
msgstr ""
"当一个节点被直接地或间接地连接到根视野时，它就成为 *场景树* 的一部分。"

#: ../../tutorials/step_by_step/scene_tree.rst:100
msgid ""
"This means that, as explained in previous tutorials, will get the "
"_enter_tree() and _ready() callbacks (as well as _exit_tree())."
msgstr ""
"这也就意味着，正如在之前教程中所诠释的那样，将会得到_enter_tree()和"
"_ready()的回调(还有_exit_tree())。"

#: ../../tutorials/step_by_step/scene_tree.rst:105
msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access "
"to everything they need to process, get input, display 2D and 3D, "
"notifications, play sound, groups, etc. When they are removed from the "
"*scene tree*, they lose it."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:111
msgid "Tree order"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:113
msgid ""
"Most node operations in Godot, such as drawing 2D, processing or getting "
"notifications are done in tree order. This means that parents and "
"siblings with less order will get notified before the current node."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:120
msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:122
msgid "A scene is loaded from disk or created by scripting."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:123
msgid ""
"The root node of that scene (only one root, remember?) is added as "
"either a child of the \"root\" Viewport (from SceneTree), or to any "
"child or grand-child of it."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:126
msgid ""
"Every node of the newly added scene, will receive the \"enter_tree\" "
"notification ( _enter_tree() callback in GDScript) in top-to-bottom "
"order."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:129
msgid ""
"An extra notification, \"ready\" ( _ready() callback in GDScript) is "
"provided for convenience, when a node and all its children are inside "
"the active scene."
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:132
msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( _exit_tree() callback in GDScript) in bottom-to-top order"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:137
msgid "Changing current scene"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:139
msgid ""
"After a scene is loaded, it is often desired to change this scene for "
"another one. The simple way to do this to use the :ref:`SceneTree."
"change_scene() <class_SceneTree_change_scene>` function:"
msgstr ""

#: ../../tutorials/step_by_step/scene_tree.rst:149
msgid ""
"This is a quick and useful way to switch scenes, but has the drawback "
"that the game will stall until the new scene is loaded and running. At "
"some point in your game, it may be desired to create proper loading "
"screens with progress bar, animated indicators or thread (background) "
"loading. This must be done manually using autoloads (see next chapter!) "
"and :ref:`doc_background_loading`."
msgstr ""
