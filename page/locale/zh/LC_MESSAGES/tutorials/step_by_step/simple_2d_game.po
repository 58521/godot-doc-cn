# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/step_by_step/simple_2d_game.rst:4
msgid "Simple 2D game"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:7
msgid "Pong"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:9
msgid ""
"In this simple tutorial, a basic game of Pong will be created. There are "
"plenty of more complex examples in the demos included with the engine, "
"but this should get one introduced to basic functionality for 2D Games."
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:14
msgid "Assets"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:16
msgid ""
"Some assets are included for this tutorial: :download:`pong_assets.zip "
"</files/pong_assets.zip>`."
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:20
msgid "Scene setup"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:22
msgid ""
"For the sake of the old times, the game will be in 640x400 pixels "
"resolution. This can be configured in the Project Settings (see :ref"
":`doc_scenes_and_nodes-configuring_the_project`). The default background "
"color should be set to black:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:27
msgid ""
"Create a :ref:`class_Node2D` node for the project root. Node2D is the "
"base type for the 2D engine. After this, add some sprites "
"(:ref:`class_Sprite` node) and set each to the corresponding texture. The"
" final scene layout should look similar to this (note: the ball is in the"
" middle!):"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:34
msgid "The scene tree should, then, look similar to this:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:38
msgid ""
"Save the scene as \"pong.scn\" and set it as the main scene in the "
"project properties."
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:44
msgid "Input actions setup"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:46
msgid ""
"There are so many input methods for video games... Keyboard, Joypad, "
"Mouse, Touchscreen (Multitouch). Yet this is pong. The only input that "
"matters is for the pads going up and down."
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:50
msgid ""
"Handling all possible input methods can be very frustrating and take a "
"lot of code. The fact that most games allow controller customization "
"makes this worse. For this, Godot created the \"Input Actions\". An "
"action is defined, then input methods that trigger it are added."
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:55
msgid ""
"Open the project properties dialog again, but this time move to the "
"\"Input Map\" tab."
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:58
msgid ""
"On it, add 4 actions: ``left_move_up``, ``left_move_down``, "
"``right_move_up``, ``right_move_down``. Assign the keys that you desire. "
"A/Z (for the left player) and Up/Down (for the right player) as keys "
"should work in most cases."
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:66
msgid "Script"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:68
msgid ""
"Create a script for the root node of the scene and open it (as explained "
"in :ref:`doc_scripting-adding_a_script`). The script will inherit Node2D:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:78
msgid ""
"In the constructor, two things will be done. The first is to enable "
"processing, and the second to store some useful values. Such values are "
"the dimensions of the screen and the pad:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:95
msgid "Then, some variables used for in-game processing will be added:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:109
msgid "Finally, the process function:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:115
msgid ""
"Get some useful values for computation. The first is the ball position "
"(from the node), the second is the rectangle (``Rect2``) for each of the "
"pads. Sprites center their textures by default, so a small adjustment of "
"``pad_size / 2`` must be added."
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:126
msgid "Since the ball position was obtained, integrating it should be simple:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:132
msgid ""
"Then, now that the ball has a new position, it should be tested against "
"everything. First, the floor and the roof:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:140
msgid ""
"If one of the pads was touched, change direction and increase speed a "
"little."
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:151
msgid "If the ball went out of the screen, it's game over. Game restarts:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:160
msgid ""
"Once everything was done with the ball, the node is updated with the new "
"position:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:167
msgid ""
"Only update the pads according to player input. The Input class is really"
" useful here:"
msgstr ""

#: ../../tutorials/step_by_step/simple_2d_game.rst:192
msgid "And that's it! A simple Pong was written with a few lines of code."
msgstr ""

