# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: 2016-08-24 23:14+0800\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"X-Generator: Poedit 1.8.8\n"

#: ../../tutorials/step_by_step/simple_2d_game.rst:4
msgid "Simple 2D game"
msgstr "简单2D游戏"

#: ../../tutorials/step_by_step/simple_2d_game.rst:7
msgid "Pong"
msgstr "Pong"

#: ../../tutorials/step_by_step/simple_2d_game.rst:9
msgid ""
"In this simple tutorial, a basic game of Pong will be created. There are "
"plenty of more complex examples in the demos included with the engine, but "
"this should get one introduced to basic functionality for 2D Games."
msgstr ""
"在这个简单的教程中，我们将创建一个基础的游戏Pong（对板弹球）。引擎一并包含了"
"很多更加复杂的范例和演示，但是这个应该可以为一个人介绍2D游戏的基本设计目的。"

#: ../../tutorials/step_by_step/simple_2d_game.rst:14
msgid "Assets"
msgstr "资源(Assets)"

#: ../../tutorials/step_by_step/simple_2d_game.rst:16
msgid ""
"Some assets are included for this tutorial: :download:`pong_assets.zip </"
"files/pong_assets.zip>`."
msgstr ""
"这里包含了这个教程需要的资源:download:`pong_assets.zip </files/pong_assets."
"zip>`."

#: ../../tutorials/step_by_step/simple_2d_game.rst:20
msgid "Scene setup"
msgstr "配置场景"

#: ../../tutorials/step_by_step/simple_2d_game.rst:22
msgid ""
"For the sake of the old times, the game will be in 640x400 pixels "
"resolution. This can be configured in the Project Settings (see :ref:"
"`doc_scenes_and_nodes-configuring_the_project`). The default background "
"color should be set to black:"
msgstr ""
"由于过去时代的原因，游戏将以640×480的像素分辨率运行。这可以在工程设定"
"（Project Setting）中配置（详情参见 :ref:`doc_scenes_and_nodes-"
"configuring_the_project` ）。默认背景颜色应当被设置为黑色："

#: ../../tutorials/step_by_step/simple_2d_game.rst:27
msgid ""
"Create a :ref:`class_Node2D` node for the project root. Node2D is the base "
"type for the 2D engine. After this, add some sprites (:ref:`class_Sprite` "
"node) and set each to the corresponding texture. The final scene layout "
"should look similar to this (note: the ball is in the middle!):"
msgstr ""
"创建一个 :ref:`class_Node2D` 节点作为工程的根基。Node2D是2D引擎的基本类型。"
"在此之后，添加一些精灵（Sprites， :ref:`class_Sprite`\n"
"节点）并且为每一个精灵设定对应的贴图（Textures）。最终场景布局应当看起来像下"
"面那样（注意：小球在中央！）："

#: ../../tutorials/step_by_step/simple_2d_game.rst:34
msgid "The scene tree should, then, look similar to this:"
msgstr "那么，场景树应当看起来像这样："

#: ../../tutorials/step_by_step/simple_2d_game.rst:38
msgid ""
"Save the scene as \"pong.scn\" and set it as the main scene in the project "
"properties."
msgstr ""
"保存场景为\"pong.scn\"然后在工程属性（Project Properties）中把它设置为主场"
"景。"

#: ../../tutorials/step_by_step/simple_2d_game.rst:44
msgid "Input actions setup"
msgstr "输入事件配置"

#: ../../tutorials/step_by_step/simple_2d_game.rst:46
msgid ""
"There are so many input methods for video games... Keyboard, Joypad, Mouse, "
"Touchscreen (Multitouch). Yet this is pong. The only input that matters is "
"for the pads going up and down."
msgstr ""
"对于电子游戏会有很多的输入方法……键盘、手柄、鼠标、触控屏（多点触控）。好在这"
"只是Pong。唯一重要的输入就是给板子上下移动的。"

#: ../../tutorials/step_by_step/simple_2d_game.rst:50
msgid ""
"Handling all possible input methods can be very frustrating and take a lot "
"of code. The fact that most games allow controller customization makes this "
"worse. For this, Godot created the \"Input Actions\". An action is defined, "
"then input methods that trigger it are added."
msgstr ""
"处理所有可能的输入方法会使非常令人恼火的并且还会需要大量代码。大多数游戏允许"
"控制器自定义按键这一事实更是雪上加霜。对于这一点，Godot创建了“输入动"
"作”（Input Actions）。一个动作被定义，那么触发它的输入方式就被添加。"

#: ../../tutorials/step_by_step/simple_2d_game.rst:55
msgid ""
"Open the project properties dialog again, but this time move to the \"Input "
"Map\" tab."
msgstr "再次打开工程属性对话框，但这次调到“输入映射”（Input Map）选项卡。"

#: ../../tutorials/step_by_step/simple_2d_game.rst:58
msgid ""
"On it, add 4 actions: ``left_move_up``, ``left_move_down``, "
"``right_move_up``, ``right_move_down``. Assign the keys that you desire. A/"
"Z (for the left player) and Up/Down (for the right player) as keys should "
"work in most cases."
msgstr ""
"在这上面加入4个动作：``left_move_up``, ``left_move_down``, "
"``right_move_up``, ``right_move_down``.分配你想要的按键。A/Z（对于惯用左手的"
"玩家）和上/下（对于惯用右手的玩家）作为在绝大多数情形中工作的键位。"

#: ../../tutorials/step_by_step/simple_2d_game.rst:66
msgid "Script"
msgstr "脚本"

#: ../../tutorials/step_by_step/simple_2d_game.rst:68
msgid ""
"Create a script for the root node of the scene and open it (as explained "
"in :ref:`doc_scripting-adding_a_script`). The script will inherit Node2D:"
msgstr ""
"为场景的根节点创建一个脚本然后打开它（正如在 :ref:`doc_scripting-"
"adding_a_script`中解释得那样）。这个脚本将会继承Node2D类："

#: ../../tutorials/step_by_step/simple_2d_game.rst:78
msgid ""
"In the constructor, two things will be done. The first is to enable "
"processing, and the second to store some useful values. Such values are the "
"dimensions of the screen and the pad:"
msgstr ""
"在构造器（Constructor）中，必须完成两件事情。第一个就是去处理，然后第二个存"
"储一些有用的值。这些值就是屏幕或者挡板的尺寸："

#: ../../tutorials/step_by_step/simple_2d_game.rst:95
msgid "Then, some variables used for in-game processing will be added:"
msgstr "然后添加用于游戏内部处理的代码："

#: ../../tutorials/step_by_step/simple_2d_game.rst:109
msgid "Finally, the process function:"
msgstr "最终，process函数："

#: ../../tutorials/step_by_step/simple_2d_game.rst:115
msgid ""
"Get some useful values for computation. The first is the ball position "
"(from the node), the second is the rectangle (``Rect2``) for each of the "
"pads. Sprites center their textures by default, so a small adjustment of "
"``pad_size / 2`` must be added."
msgstr ""
"获得到有用的值用于计算。首先是球的位置（从代码），第二个就是每个挡板的矩形区"
"域（“Rect2”）。默认地精灵居中于他们的贴图。所以加入一个小的调整“pad_size / "
"2”。"

#: ../../tutorials/step_by_step/simple_2d_game.rst:126
msgid "Since the ball position was obtained, integrating it should be simple:"
msgstr "由于球的位置已经获知，把它们累加起来应当不是问题："

#: ../../tutorials/step_by_step/simple_2d_game.rst:132
msgid ""
"Then, now that the ball has a new position, it should be tested against "
"everything. First, the floor and the roof:"
msgstr ""
"然后，既然球拥有了一个新的位置。它倚在所有东西上都应该被检测。先是底部和顶"
"部："

#: ../../tutorials/step_by_step/simple_2d_game.rst:140
msgid ""
"If one of the pads was touched, change direction and increase speed a "
"little."
msgstr "如果一个挡板被触碰，改变方向然后轻微加速。"

#: ../../tutorials/step_by_step/simple_2d_game.rst:151
msgid "If the ball went out of the screen, it's game over. Game restarts:"
msgstr "如果游戏飞出屏幕外部，游戏结束。游戏重启："

#: ../../tutorials/step_by_step/simple_2d_game.rst:160
msgid ""
"Once everything was done with the ball, the node is updated with the new "
"position:"
msgstr "一旦球上的所有事情都做完了，节点就应当以一个新的位置更新："

#: ../../tutorials/step_by_step/simple_2d_game.rst:167
msgid ""
"Only update the pads according to player input. The Input class is really "
"useful here:"
msgstr "只根据用户输入来更新挡板。Input类此时很有用："

#: ../../tutorials/step_by_step/simple_2d_game.rst:192
msgid "And that's it! A simple Pong was written with a few lines of code."
msgstr "这就成了！一个用几行代码写出来的简单的Pong。"
