# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: 2016-08-24 23:05+0800\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Last-Translator: \n"
"X-Generator: Poedit 1.8.8\n"

#: ../../tutorials/step_by_step/scripting.rst:4
msgid "Scripting"
msgstr "脚本(Script)"

#: ../../tutorials/step_by_step/scripting.rst:7
msgid "Introduction"
msgstr "介绍"

#: ../../tutorials/step_by_step/scripting.rst:9
msgid ""
"Much has been said about tools that allow users to create video games without "
"programming. It's been a dream for many independent developers to create games "
"without learning how to code. This need has been around for a long time, even "
"inside companies, where game designers wish to have more control of the game "
"flow."
msgstr ""
"正如我们之前所说的那样，我们希望游戏开发工具可以不需要编程就可以创作电子游戏。然"
"而，目前不需要学习编码就能开发游戏这仍然是不太现实的，这种无编程的游戏设计流程还"
"有很长的路要走。因为在很多情况下我们需要使用程序来控制游戏中的各种逻辑和整个游戏"
"的流程不是么？"

#: ../../tutorials/step_by_step/scripting.rst:15
msgid ""
"Many products have been shipped promising a no-programming environment, but the "
"result is often incomplete, too complex or inefficient compared to traditional "
"code. As a result, programming is here to stay for a long time. In fact, the "
"general direction in game engines has been to add tools that try to reduce the "
"amount of code that needs to be written for specific tasks, to speed up "
"development."
msgstr ""
"许多引擎和开发工具宣称不需要编程就能够设计作品，但这些工具往往半途而废或者过于复"
"杂。因此，编程在游戏开发这项工作中仍然存在，并将在很长一段时间内难以被取代。事实"
"上，现在都游戏引擎都朝着提供各种实用的工具来尽量减少开发过程中的代码量，以此解放"
"开发者来提高游戏开发效率。"

#: ../../tutorials/step_by_step/scripting.rst:22
msgid ""
"In that sense, Godot has taken some useful design decisions towards that goal. "
"The first and most important is the scene system. The aim of it is not obvious "
"at first, but works well later on. That is, to relieve programmers from the "
"responsibility of architecting code."
msgstr ""
"同样，Godot也是朝着这个方向来设计的，其中最明显也是最重要的便是它的场景系统。它"
"的用途可能不那么直观，但是一旦你掌握它之后，将长期从中收益。它能够将程序员从无限"
"的架构游戏场景的编码工作中解放出来。"

#: ../../tutorials/step_by_step/scripting.rst:27
msgid ""
"When designing games using the scene system, the whole project is fragmented "
"into *complementary* scenes (not individual ones). Scenes complement each "
"other, instead of being separate. There will be plenty of examples about this "
"later on, but it's very important to remember it."
msgstr ""
"使用场景系统设计游戏时，整个游戏项目被分为若干个相互补充的场景（并非独立的场"
"景）。这些场景是相互补充而不是彼此分离的，后面的教程将会有大量的例子来介绍这个场"
"景系统。现在，请记住这一点，因为它是很重要的概念。"

#: ../../tutorials/step_by_step/scripting.rst:32
msgid ""
"For those with a good amount of programming expertise, this means a different "
"design pattern to MVC. Godot promises efficiency at the expense of dropping the "
"MVC habits, which are replaced by the *scenes as a complement* pattern."
msgstr ""
"对于那些有丰富经验的老码农来说，这意味着现在的场景系统与你所熟知的MVC设计模式有"
"很大的区别。现在我们需要你暂时将你的这些习惯扔掉，来尝试一下*场景补充*设计模式"
"（Scenes As a Complement，没有一个确定的官翻，目前先译做场景补充吧）。Godot向你"
"保证，这种设计模式的效用是值得让你在游戏设计中丢弃MVC的。"

#: ../../tutorials/step_by_step/scripting.rst:37
msgid ""
"Godot also uses the `extend <http://c2.com/cgi/wiki?EmbedVsExtend>`__ pattern "
"for scripting, meaning that scripts extend from all the available engine "
"classes."
msgstr ""
"Godot的脚本支持继承(`extend <http://c2.com/cgi/wiki?EmbedVsExtend>`__)，允许脚本"
"继承自所有引擎中可以使用的类。"

#: ../../tutorials/step_by_step/scripting.rst:42
msgid "GDScript"
msgstr "GDScript"

#: ../../tutorials/step_by_step/scripting.rst:44
msgid ""
":ref:`doc_gdscript` is a dynamically typed scripting language to fit inside "
"Godot. It was designed with the following goals:"
msgstr ""
":ref:`doc_gdscript` 是一门专门为Godot引擎设计的动态数据类型的脚本语言。它坚持以"
"下设计原则："

#: ../../tutorials/step_by_step/scripting.rst:47
msgid ""
"First and most importantly, making it simple, familiar and as easy to learn as "
"possible."
msgstr "首要任务是尽可能简单、易于学习。"

#: ../../tutorials/step_by_step/scripting.rst:49
msgid ""
"Making the code readable and error safe. The syntax is mostly borrowed from "
"Python."
msgstr "让脚本代码容易理解，并且安全、容错高，语法在很大程度上借鉴自Python。"

#: ../../tutorials/step_by_step/scripting.rst:52
msgid ""
"Programmers generally take a few days to learn it, and within two weeks feel "
"comfortable with it."
msgstr ""
"一般程序员只需花几天时间来学习它，两周左右即可得心应手地使用它进行游戏编程。"

#: ../../tutorials/step_by_step/scripting.rst:55
msgid ""
"As with most dynamically typed languages though, the higher productivity (code "
"is easier to learn, faster to write, no compilation, etc) is balanced with a "
"performance penalty, but most critical code is written in C++ already in the "
"engine (vector ops, physics, math, indexing, etc), making the resulting "
"performance more than enough for most types of games."
msgstr ""
"正如大多数动态类型的语言一样，产能高的脚本（容易学习、编写快速、没有完整类型这类"
"语言）的执行效率都在一定程度上有所折扣。GDScript中的绝大多数核心代码（诸如向量、"
"物理库、数学库等等）都是使用C++编写的，这使得Godot的脚本执行效率远高于其他游戏引"
"擎的脚本。"

#: ../../tutorials/step_by_step/scripting.rst:62
msgid ""
"In any case, if more performance is required, critical sections can be "
"rewritten in C++ and exposed transparently to the script. This allows for "
"replacing a GDScript class with a C++ class without altering the rest of the "
"game."
msgstr ""
"任何情况下，对于对性能要求较高的程序，都可将性能影响较高的核心部分使用C++来写，"
"然后在导出给脚本使用。Godot允许你不必变更已经设计好的游戏就能使用C++来替换任何一"
"个GDScript类来提升游戏性能。"

#: ../../tutorials/step_by_step/scripting.rst:68
msgid "Scripting a scene"
msgstr "为场景编写脚本"

#: ../../tutorials/step_by_step/scripting.rst:70
msgid ""
"Before continuing, please make sure to read the :ref:`doc_gdscript` reference. "
"It's a simple language and the reference is short, should not take more than a "
"few minutes to glance."
msgstr ""
"在你继续下面的内容之前，请确认你已经看过:ref:`doc_gdscript`这篇文档。GDScript是"
"一门简单的脚本语言，因此这篇文档并不长，你应该花几分钟过一遍。"

#: ../../tutorials/step_by_step/scripting.rst:75
msgid "Scene setup"
msgstr "建立场景"

#: ../../tutorials/step_by_step/scripting.rst:77
msgid ""
"This tutorial will begin by scripting a simple GUI scene. Use the add node "
"dialog to create the following hierarchy, with the following nodes:"
msgstr ""
"这段教程将带你为一个简单的GUI场景编写脚本。使用添加节点对话框来创建如下节点层"
"次："

#: ../../tutorials/step_by_step/scripting.rst:80
msgid "Panel"
msgstr ""

#: ../../tutorials/step_by_step/scripting.rst:82
msgid "Label"
msgstr ""

#: ../../tutorials/step_by_step/scripting.rst:83
msgid "Button"
msgstr ""

#: ../../tutorials/step_by_step/scripting.rst:85
msgid "It should look like this in the scene tree:"
msgstr "你的节点树窗口看起来应该像这样子"

#: ../../tutorials/step_by_step/scripting.rst:89
msgid "And try to make it look like this in the 2D editor, so it makes sense:"
msgstr "在2D编辑器中尝试将这个场景调整成类似下面这样："

#: ../../tutorials/step_by_step/scripting.rst:93
msgid "Finally, save the scene, a fitting name could be \"sayhello.scn\""
msgstr "最后，保存场景，将其保存在名为“sayhello.tscn”的文件中。"

#: ../../tutorials/step_by_step/scripting.rst:98
msgid "Adding a script"
msgstr "添加脚本"

#: ../../tutorials/step_by_step/scripting.rst:100
msgid ""
"Right click on the panel node, then select \"Add Script\" in the context menu:"
msgstr "鼠标右键点击Panel节点，选中“Add Script”选项"

#: ../../tutorials/step_by_step/scripting.rst:105
msgid ""
"The script creation dialog will pop up. This dialog allows to select the "
"language, class name, etc. GDScript does not use class names in script files, "
"so that field is not editable. The script should inherit from \"Panel\" (as it "
"is meant to extend the node, which is of Panel type, this is automatically "
"filled anyway)."
msgstr ""
"创建脚本的对话框将会弹出。这个对话框允许你选择脚本语言、类名等。GDScript并不在脚"
"本文件中定义类名，因此类名是无法编辑的。如下图所示，脚本继承自Panel类（Panel继承"
"自Node，这个输入框一般是自动帮你填好的）。"

#: ../../tutorials/step_by_step/scripting.rst:111
msgid "Enter a path name for the script and then select \"Create\":"
msgstr ""
"现在选择保存脚本的文件名（如果你之前保存过场景，那么将会填充生产与场景文件相同的"
"文件名，这里应该是sayhello.gd）然后按下“Create”按钮。"

#: ../../tutorials/step_by_step/scripting.rst:115
msgid ""
"Once this is done, the script will be created and added to the node. You can "
"see this both as an extra icon in the node, as well as in the script property:"
msgstr ""
"这样我们就创建了一个脚本，并将其添加到了Panel节点上。你可以通过点击节点上的脚本"
"图标或者通过Inspector窗口中的\"script\"属性来查看这个脚本。"

#: ../../tutorials/step_by_step/scripting.rst:121
msgid ""
"To edit the script, select either of the highlighted buttons. This will bring "
"you to the script editor where an existing template will be included by default:"
msgstr ""
"要编辑脚本，只需要按照上面的操作即可打开脚本编辑窗口。下图是创建脚本的对话框自动"
"为我们填写的脚本内容："

#: ../../tutorials/step_by_step/scripting.rst:127
msgid ""
"There is not much in there. The \"_ready()\" function is called when the node "
"(and all its children) entered the active scene. (Remember, it's not a "
"constructor, the constructor is \"_init()\" )."
msgstr ""
"这儿并没有太多内容。“_ready()”函数将会在Panel节点（以及其所有子孙节点）添加到场"
"景后被调用。（请记住，这个函数并不是该类的构造函数，构造函数是\"_init()\"）。"

#: ../../tutorials/step_by_step/scripting.rst:132
msgid "The role of the script"
msgstr "脚本编写规则"

#: ../../tutorials/step_by_step/scripting.rst:134
msgid ""
"A script adds behavior to a node. It is used to control the node functions as "
"well as other nodes (children, parent, siblings, etc). The local scope of the "
"script is the node (just like in regular inheritance) and the virtual functions "
"of the node are captured by the script."
msgstr ""
"一般脚本用于为节点添加一些基本的控制操作，这些控制或操作往往是针对该节点或者是其"
"他节点（可能是其子孙节点、父节点、兄弟节点等）。同其他语言的继承机制一样，脚本的"
"作用域是在它所属的节点，同时脚本能够重写其父类的虚函数。"

#: ../../tutorials/step_by_step/scripting.rst:143
msgid "Handling a signal"
msgstr "处理信号（Signal）"

#: ../../tutorials/step_by_step/scripting.rst:145
msgid ""
"Signals are used mostly in GUI nodes, (although other nodes have them too). "
"Signals are \"emitted\" when some specific kind of action happens, and can be "
"connected to any function of any script instance. In this step, the \"pressed\" "
"signal from the button will be connected to a custom function."
msgstr ""
"信号（Signal）在GUI节点中被大量使用（其他节点同样能使用，请参考GDScript文档）。"
"信号在发生特定事件时被触发（emit），能够被绑定（connect）到任何脚本的任何函数"
"上。在这里，我们将Panel节点下按钮Button节点的“pressed”信号连接到一个函数。右键点"
"击Button节点，选择“Edit Connections”弹出信号绑定对话框："

#: ../../tutorials/step_by_step/scripting.rst:151
msgid ""
"An interface for connecting signals to your scripts exists in the editor. You "
"can access this by selecting the node in the scene tree and then selecting the "
"\"Node\" tab. Make sure that you have \"Signals\" selected."
msgstr "这个对话框中列出了所有Button类能够触发的信号。"

#: ../../tutorials/step_by_step/scripting.rst:157
msgid ""
"In any case, at this point it is clear that that we are interested in the "
"\"pressed\" signal. Instead of doing it with the visual interface, we will opt "
"to make the connection using code."
msgstr ""
"但在这里我们并不使用它，你知道这里能够绑定信号和脚本中的函数就可以了。我们不想搞"
"得太过简单，因此关闭对话框，我带你装逼！"

#: ../../tutorials/step_by_step/scripting.rst:161
msgid ""
"For this, there is a function that is probably the one that Godot programmers "
"will use the most, this is :ref:`Node.get_node() <class_Node_get_node>`. This "
"function uses paths to fetch nodes in the current tree or anywhere in the "
"scene, relative to the node holding the script."
msgstr ""
"为了更高的逼格，哦不，是为了让代码看上去更有条理，让别人阅读我们的脚本时能够清"
"楚“pressed”信号触发时我们干了什么事，我们需要用脚本来绑定这个信号。这里我们需要"
"用到Godot中最常用的:ref:`Node.get_node() <class_Node_get_node>`函数，这个函数通"
"过节点路径来获取与这个脚本被绑定到的节点相关的其他节点(有点绕口，请在读一遍)。"

#: ../../tutorials/step_by_step/scripting.rst:167
msgid "To fetch the button, the following must be used:"
msgstr "要获取到Button节点，我们这样用它："

#: ../../tutorials/step_by_step/scripting.rst:173
msgid ""
"So, next, a callback will be added for when a button is pressed, that will "
"change the label's text:"
msgstr ""
"然后我们添加一个回调函数来处理按钮被按下时触发的\"pressed\"信号，在按下时修改"
"Label节点的文本。"

#: ../../tutorials/step_by_step/scripting.rst:181
msgid ""
"Finally, the button \"pressed\" signal will be connected to that callback in "
"_ready(), by using :ref:`Object.connect() <class_Object_connect>`."
msgstr ""
"最后在_ready()函数中使用 :ref:`Object.connect() <class_Object_connect>` 函数将"
"Button节点的“pressed”信号绑定到这个回调函数上。"

#: ../../tutorials/step_by_step/scripting.rst:189
msgid "The final script should look like this:"
msgstr "最终，这个脚本的内容将是这样子的："

#: ../../tutorials/step_by_step/scripting.rst:206
msgid ""
"Running the scene should have the expected result when pressing the button:"
msgstr "执行这个场景，如果没有出错的话，你将得到预期的效果，是不是很棒啊！"

#: ../../tutorials/step_by_step/scripting.rst:211
msgid ""
"**Note:** As it is a common mistake in this tutorial, let's clarify again that "
"get_node(path) works by returning the *immediate* children of the node "
"controlled by the script (in this case, *Panel*), so *Button* must be a child "
"of *Panel* for the above code to work. To give this clarification more context, "
"if *Button* were a child of *Label*, the code to obtain it would be:"
msgstr ""
"**注意**：本节中常见的错误是很多同学可能没有按照教程中的节点次序创建Button节点，"
"把Button节点放到了Label下面。这是因为在创建Button时你选中的是Label对象造成的。这"
"会导致在脚本中通过get_node(\"Button\")获取不到Button这个对象，因为它并不是我们的"
"脚本绑定的Panel的子对象（他是个孙子～）。因此，我们需要下面的方式获取到这个孙"
"子："

#: ../../tutorials/step_by_step/scripting.rst:224
msgid "And, also, try to remember that nodes are referenced by name, not by type."
msgstr ""
"最后，再啰嗦一句，记住我们是通过名称获取节点的，而不是通过节点的类型，尽管这里节"
"点的名称就是它们的类型名。"
