# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 23:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: GoDogeCN\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/2d/physics_introduction.rst:4
msgid "Physics introduction"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:6
msgid ""
"Our world is made of tangible matter. In our world, a piano can't go "
"through a wall when going into a house. It needs to use the door. Video "
"games are often like the the real world and Pac-Man can't go through the "
"walls of his maze (although he can teleport from the left to the right "
"side of the screen and back)."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:12
msgid ""
"Anyway, moving sprites around is nice but one day they have to collide "
"properly, so let's get to the point."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:16
msgid "Shapes"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:18
msgid ""
"The base collidable object in Godot's 2D world is a :ref:`Shape2D "
"<class_Shape2D>`. There are many types of shapes, all of them inherit "
"this base class:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:22
msgid ":ref:`CircleShape2D <class_CircleShape2D>`"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:23
msgid ":ref:`RectangleShape2D <class_RectangleShape2D>`"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:24
msgid ":ref:`CapsuleShape2D <class_CapsuleShape2D>`"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:25
msgid ":ref:`ConvexPolygonShape2D <class_ConvexPolygonShape2D>`"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:26
msgid ":ref:`ConcavePolygonShape2D <class_ConcavePolygonShape2D>`"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:27
msgid "etc. (there are others check the class list)."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:29
msgid ""
"Shapes are of type :ref:`Resource <class_Resource>`, but they can be "
"created via code easily. For example:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:43
msgid ""
"The main use for shapes is checking collision/intersection and getting "
"resolution information. Shapes are mostly convex, (except the "
"concavepolygon one, which is just a list of segments to check collision "
"against). This collision check is done easily with the built-in functions"
" like:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:55
msgid ""
"Godot will return correct collision and collision info from the different"
" calls to the Shape2D api. Collision between all shapes and transforms "
"can be done this way, or even obtaining contact information, motion "
"casting, etc."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:61
msgid "Transforming shapes"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:63
msgid ""
"As seen before in the collide functions, 2D shapes in godot can be "
"transformed by using a regular :ref:`Matrix32 <class_Matrix32>` "
"transform, meaning the can check collision while scaled, moved and "
"rotated. The only limitation to this is that shapes with curved sections "
"(such as circle and capsule) can only be scaled uniformly. This means "
"that circle or capsule shapes scaled in the form of an ellipse **will not"
" work properly**. This is a limitation on the collision algorithm used "
"(SAT), so make sure that your circle and capsule shapes are always scaled"
" uniformly!"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:76
msgid "When problems begin"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:78
msgid ""
"Even though this sounds good, reality is that collision detection alone "
"is usually not enough in most scenarios. Many problems start arising as "
"long as the development of the game is in progress:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:83
msgid "Too many combinations!"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:85
msgid ""
"Games have several dozens, hundreds, thousands! of objects that can "
"collide and be collided. The typical approach is to test everything "
"against everything in two for loops like this:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:96
msgid ""
"But this scales really bad. Let's imagine there are only 100 objects in "
"the game. This means that 100\\*100=10000 collisions will need to be "
"tested each frame. This is a lot!"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:101
msgid "Visual aid"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:103
msgid ""
"Most of the time, creating a shape via code is not enough. We need to "
"visually place it over a sprite, draw a collision polygon, etc. It is "
"obvious that we need nodes to create the proper collision shapes in a "
"scene."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:109
msgid "Collision resolution"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:111
msgid ""
"Imagine we solved the collision issue, we can tell easily and quickly "
"which shapes overlap. If many of them are dynamic objects that move "
"around, or move according to newtonian physics, solving a collision of "
"multiple objects can be really difficult code-wise."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:117
msgid "Introducing... Godot's physics engine!"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:119
msgid ""
"To solve all these problems, Godot has a physics and collision engine "
"that is well integrated into the scene system, yet it allows different "
"levels and layers of functionality. The built-in physics engine can be "
"used for:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:124
msgid "Simple Collision Detection: See :ref:`Shape2D <class_Shape2D>` API."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:126
msgid ""
"Scene Kinematics: Handle shapes, collisions, broadphase, etc as nodes. "
"See :ref:`Area2D <class_Area2D>`."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:128
msgid ""
"Scene Physics: Rigid bodies and constraints as nodes. See "
":ref:`RigidBody2D <class_RigidBody2D>`, and the joint nodes."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:132
msgid "Units of measure"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:134
msgid ""
"It is often a problem when integrating a 2D physics engine to a game that"
" such engines are optimized to work using meters as unit of measure. "
"Godot uses a built-in custom 2D physics engine that is designed to "
"function properly in pixels, so all units and default values used for "
"stabilization are tuned for this, making development more "
"straightforward."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:142
msgid "CollisionObject2D"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:144
msgid ""
":ref:`CollisionObject2D <class_CollisionObject2D>` is the (virtual) base "
"node for everything that can be collided in 2D. Area2D, StaticBody2D, "
"KinematicBody2D and RigidBody2D all inherit from it. This node contains a"
" list of shapes (Shape2D) and a relative transform. This means that all "
"collisionable objects in Godot can use multiple shapes at different "
"transforms (offset/scale/rotation). Just remember that, as mentioned "
"before, **non-uniform scale will not work for circle and capsule "
"shapes**."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:156
msgid "StaticBody2D"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:158
msgid ""
"The simplest node in the physics engine is the StaticBody2D, which "
"provides a static collision. This means that other objects can collide "
"against it, but StaticBody2D will not move by itself or generate any kind"
" of interaction when colliding other bodies. It's just there to be "
"collided."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:164
msgid "Creating one of those bodies is not enough, because it lacks collision:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:168
msgid ""
"From the previous point, we know that CollisionObject2D derived nodes "
"have an internal lists of shapes and transforms for collisions, but how "
"to edit them? There are two special nodes for that."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:173
msgid "CollisionShape2D"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:175
msgid ""
"This node is a helper node. It must be created as a direct children of a "
"CollisionObject2D derived node: :ref:`Area2D <class_Area2D>`, "
":ref:`StaticBody2D <class_StaticBody2D>`, :ref:`KinematicBody2D "
"<class_KinematicBody2D>`, :ref:`RigidBody2D <class_RigidBody2D>`."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:180
msgid ""
"By itself it does nothing, but when created as a child of the above "
"mentioned nodes, it adds collision shapes to them. Any amount of "
"CollisionShape2D children can be created, meaning the parent object will "
"simply have more collision shapes. When added/deleted/moved/edited, it "
"updates the list of shapes in the parent node."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:186
msgid ""
"At run time, though, this node does not exist (can't be accessed with "
"``get_node()``), since it's only meant to be an editor helper. To access "
"the shapes created at runtime, use the CollisionObject2D API directly."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:190
msgid ""
"As an example, here's the scene from the platformer, containing an Area2D"
" with child CollisionObject2D and coin sprite:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:196
msgid "Triggers"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:198
msgid ""
"A CollisionShape2D or CollisionPolygon2D can be set as a trigger. When "
"used in a RigidBody2D or KinematicBody2D, \"trigger\" shapes become non-"
"collidable (objects can't collide against it). They just move around with"
" the object as ghosts. This makes them useful in two situations:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:203
msgid "Disabling collision in a specific shape."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:204
msgid ""
"Get an Area2D to trigger a body_enter / body_exit signals with non "
"collidable objects (useful in several situations)."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:208
msgid "CollisionPolygon2D"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:210
msgid ""
"This one is similar to CollisionShape2D, except that instead of assigning"
" a shape, a polygon can be edited (drawn by the user) to determine the "
"shape. The polygon can be convex or concave, it doesn't matter."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:215
msgid ""
"Going back, here's the scene with the StaticBody2D, the static body is "
"the child of a sprite (meaning if the sprite moves, the collision does "
"too). In turn, the CollisionPolygon is a child of staticbody, meaning it "
"adds collision shapes to it."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:222
msgid ""
"In fact, what CollisionPolygon does is to decompose the polygon in convex"
" shapes (shapes can only be convex, remember?) and adds them to the "
"CollisionObject2D:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:229
msgid "KinematicBody2D"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:231
msgid ""
":ref:`KinematicBody2D <class_KinematicBody2D>` bodies are special types "
"of bodies that are meant to be user-controlled. They are not affected by "
"the physics at all (to other types of bodies, such a character or a "
"rigidbody, these are the same as a staticbody). They have however, two "
"main uses:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:237
msgid ""
"**Simulated Motion**: When these bodies are moved manually, either from "
"code or from an :ref:`AnimationPlayer <class_AnimationPlayer>` (with "
"process mode set to fixed!), the physics will automatically compute an "
"estimate of their linear and angular velocity. This makes them very "
"useful for moving platforms or other AnimationPlayer-controlled objects "
"(like a door, a bridge that opens, etc). As an example, the 2d/platformer"
" demo uses them for moving platforms."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:245
msgid ""
"**Kinematic Characters**: KinematicBody2D also has an api for moving "
"objects (the move() function) while performing collision tests. This "
"makes them really useful to implement characters that collide against a "
"world, but that don't require advanced physics. There is a tutorial about"
" :ref:`doc_kinematic_character_2d`."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:252
msgid "RigidBody2D"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:254
msgid ""
"This type of body simulates newtonian physics. It has mass, friction, "
"bounce, and the 0,0 coordinates simulates the center of mass. When real "
"physics are needed, :ref:`RigidBody2D <class_RigidBody2D>` is the node to"
" use. The motion of this body is affected by gravity and/or other bodies."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:260
msgid ""
"Rigid bodies are usually active all the time, but when they end up in "
"resting position and don't move for a while, they are put to sleep until "
"something else wakes them up. This saves an enormous amount of CPU."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:264
msgid ""
"RigidBody2D nodes update their transform constantly, as it is generated "
"by the simulation from a position, linear velocity and angular velocity. "
"As a result, [STRIKEOUT:this node can't be scaled]. Scaling the children "
"nodes should work fine though."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:269
msgid ""
"As a plus, as this is very common in games, it is possible to change a "
"RigidBody2D node to behave like a Character (no rotation), StaticBody or "
"KinematicBody according to different situations (example, an enemy frozen"
" by an ice beam becomes a StaticBody)"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:274
msgid ""
"The best way to interact with a RigidBody2D is during the force "
"integration callback. In this very moment, the physics engine "
"synchronizes state with the scene and allows full modification of the "
"internal parameters (otherwise, as it may be running in a thread, changes"
" will not take place until next frame). To do this, the following "
"function must be overridden:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:286
msgid ""
"The \"state\" parameter is of type :ref:`Physics2DDirectBodyState "
"<class_Physics2DDirectBodyState>`. Please do not use this object (state) "
"outside the callback as it will result in an error."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:291
msgid "Contact reporting"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:293
msgid ""
"In general, RigidBody2D will not keep track of the contacts, because this"
" can require a huge amount of memory if thousands of rigid bodies are in "
"the scene. To get contacts reported, simply increase the amount of the "
"\"contacts reported\" property from zero to a meaningful value (depending"
" on how many you are expecting to get). The contacts can be later "
"obtained via the :ref:`Physics2DDirectBodyState.get_contact_count() "
"<class_Physics2DDirectBodyState_get_contact_count>` and related "
"functions."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:302
msgid ""
"Contact monitoring via signals is also available (signals similar to the "
"ones in Area2D, described below) via a boolean property."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:306
msgid "Area2D"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:308
msgid "Areas in Godot physics have three main roles:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:310
msgid ""
"1. Override the space parameters for objects entering them (ie. gravity, "
"gravity direction, gravity type, density, etc)."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:313
msgid "Monitor when rigid or kinematic bodies enter or exit the area."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:315
msgid "Monitor other areas (this is the simplest way to get overlap test)"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:317
msgid ""
"The second function is the most common. For it to work, the "
"\"monitoring\" property must be enabled (it is by default). There are two"
" types of signals emitted by this node:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:336
msgid ""
"By default, areas also receive mouse/touchscreen input, providing a "
"lower-level way than controls to implement this kind of input in a game. "
"Bodies support this but it's disabled by default."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:341
msgid "In case of overlap, who receives collision information?"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:343
msgid ""
"Remember that not every combination of two bodies can \"report\" "
"contacts. Static bodies are passive and will not report contacts when "
"hit. Kinematic Bodies will report contacts but only against "
"Rigid/Character bodies. Area2D will report overlap (not detailed "
"contacts) with bodies and with other areas. The following table should "
"make it more visual:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:350
msgid "**Type**"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:350
msgid "*RigidBody*"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:350
msgid "*CharacterBody*"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:350
msgid "*KinematicBody*"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:350
msgid "*StaticBody*"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:350
msgid "*Area*"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:352
msgid "**RigidBody**"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:352
#: ../../tutorials/2d/physics_introduction.rst:354
#: ../../tutorials/2d/physics_introduction.rst:356
#: ../../tutorials/2d/physics_introduction.rst:360
msgid "Both"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:352
msgid "Rigidbody"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:352
#: ../../tutorials/2d/physics_introduction.rst:354
#: ../../tutorials/2d/physics_introduction.rst:356
#: ../../tutorials/2d/physics_introduction.rst:360
msgid "Area"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:354
msgid "**CharacterBody**"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:354
#: ../../tutorials/2d/physics_introduction.rst:358
msgid "CharacterBody"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:356
msgid "**KinematicBody**"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:356
#: ../../tutorials/2d/physics_introduction.rst:358
#: ../../tutorials/2d/physics_introduction.rst:360
msgid "None"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:358
msgid "**StaticBody**"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:358
msgid "RigidBody"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:360
msgid "**Area**"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:364
msgid "Physics global variables"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:366
msgid ""
"A few global variables can be tweaked in the project settings for "
"adjusting how 2D physics works:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:371
msgid ""
"Leaving them alone is best (except for the gravity, that needs to be "
"adjusted in most games), but there is one specific parameter that might "
"need tweaking which is the \"cell_size\". Godot 2D physics engine used by"
" default a space hashing algorithm that divides space in cells to compute"
" close collision pairs more efficiently."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:377
msgid ""
"If a game uses several colliders that are really small and occupy a small"
" portion of the screen, it might be necessary to shrink that value "
"(always to a power of 2) to improve efficiency. Likewise if a game uses "
"few large colliders that span a huge map (of several screens of size), "
"increasing that value a bit might help save resources."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:384
msgid "Fixed process callback"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:386
msgid ""
"The physics engine may spawn multiple threads to improve performance, so "
"it can use up to a full frame to process physics. Because of this, when "
"accessing physics variables such as position, linear velocity, etc. they "
"might not be representative of what is going on in the current frame."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:391
msgid ""
"To solve this, Godot has a fixed process callback, which is like process "
"but it's called once per physics frame (by default 60 times per second). "
"During this time, the physics engine is in *synchronization* state and "
"can be accessed directly and without delays."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:396
msgid ""
"To enable a fixed process callback, use the ``set_fixed_process()`` "
"function, example:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:410
msgid "Casting rays and motion queries"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:412
msgid ""
"It is very often desired to \"explore\" the world around from our code. "
"Throwing rays is the most common way to do it. The simplest way to do "
"this is by using the RayCast2D node, which will throw a ray every frame "
"and record the intersection."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:417
msgid ""
"At the moment there isn't a high level API for this, so the physics "
"server must be used directly. For this, the "
":ref:`Physics2DDirectspaceState <class_Physics2DDirectspaceState>` class "
"must be used. To obtain it, the following steps must be taken:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:422
msgid ""
"1. It must be used inside the ``_fixed_process()`` callback, or at "
"``_integrate_forces()``"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:425
msgid "The 2D RIDs for the space and physics server must be obtained."
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:427
msgid "The following code should work:"
msgstr ""

#: ../../tutorials/2d/physics_introduction.rst:435
msgid "Enjoy doing space queries!"
msgstr ""

