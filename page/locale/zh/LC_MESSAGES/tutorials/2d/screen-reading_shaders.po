# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/2d/screen-reading_shaders.rst:4
msgid "Screen-reading shaders"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:7
msgid "Introduction"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:9
msgid ""
"Very often it is desired to make a shader that reads from the same screen"
" it's writing to. 3D APIs such as OpenGL or DirectX make this very "
"difficult because of internal hardware limitations. GPUs are extremely "
"parallel, so reading and writing causes all sort of cache and coherency "
"problems. As a result, not even the most modern hardware supports this "
"properly."
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:16
msgid ""
"The workaround is to make a copy of the screen, or a part of the screen, "
"to a back-buffer and then read from it while drawing. Godot provides a "
"few tools that makes this process easy!"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:21
msgid "TexScreen shader instruction"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:23
msgid ""
"Godot :ref:`doc_shading_language` has a special instruction, "
"\"texscreen\", it takes as parameter the UV of the screen and returns a "
"vec3 RGB with the color. A special built-in varying: SCREEN_UV can be "
"used to obtain the UV for the current fragment. As a result, this simple "
"2D fragment shader:"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:32
msgid ""
"results in an invisible object, because it just shows what lies behind. "
"The same shader using the visual editor looks like this:"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:38
msgid "TexScreen example"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:40
msgid ""
"Texscreen instruction can be used for a lot of things. There is a special"
" demo for *Screen Space Shaders*, that you can download to see and learn."
" One example is a simple shader to adjust brightness, contrast and "
"saturation:"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:60
msgid "Behind the scenes"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:62
msgid ""
"While this seems magical, it's not. The Texscreen instruction, when first"
" found in a node that is about to be drawn, does a full-screen copy to a "
"back-buffer. Subsequent nodes that use texscreen() in shaders will not "
"have the screen copied for them, because this ends up being very "
"inefficient."
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:68
msgid ""
"As a result, if shaders that use texscreen() overlap, the second one will"
" not use the result of the first one, resulting in unexpected visuals:"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:74
msgid ""
"In the above image, the second sphere (top right) is using the same "
"source for texscreen() as the first one below, so the first one "
"\"disappears\", or is not visible."
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:78
msgid ""
"To correct this, a :ref:`BackBufferCopy <class_BackBufferCopy>` node can "
"be instanced between both spheres. BackBufferCopy can work by either "
"specifying a screen region or the whole screen:"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:85
msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:90
msgid "Back-buffer logic"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:92
msgid ""
"So, to make it clearer, here's how the backbuffer copying logic works in "
"Godot:"
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:95
msgid ""
"If a node uses the texscreen(), the entire screen is copied to the back "
"buffer before drawing that node. This only happens the first time, "
"subsequent nodes do not trigger this."
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:98
msgid ""
"If a BackBufferCopy node was processed before the situation in the point "
"above (even if texscreen() was not used), this behavior described in the "
"point above does not happen. In other words, automatic copying of the "
"entire screen only happens if texscreen() is used in a node for the first"
" time and no BackBufferCopy node (not disabled) was found before in tree-"
"order."
msgstr ""

#: ../../tutorials/2d/screen-reading_shaders.rst:104
msgid ""
"BackBufferCopy can copy either the entire screen or a region. If set to "
"only a region (not the whole screen) and your shader uses pixels not in "
"the region copied, the result of that read is undefined (most likely "
"garbage from previous frames). In other words, it's possible to use "
"BackBufferCopy to copy back a region of the screen and then use "
"texscreen() on a different region. Avoid this behavior!"
msgstr ""

