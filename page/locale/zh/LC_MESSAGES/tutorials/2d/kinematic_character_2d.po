# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/2d/kinematic_character_2d.rst:4
msgid "Kinematic Character (2D)"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:7
msgid "Introduction"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:9
msgid ""
"Yes, the name sounds strange. \"Kinematic Character\". What is that? The "
"reason is that when physics engines came out, they were called "
"\"Dynamics\" engines (because they dealt mainly with collision "
"responses). Many attempts were made to create a character controller "
"using the dynamics engines but it wasn't as easy as it seems. Godot has "
"one of the best implementations of dynamic character controller you can "
"find (as it can be seen in the 2d/platformer demo), but using it "
"requieres a considerable level of skill and understanding of physics "
"engines (or a lot of patience with trial and error)."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:19
msgid ""
"Some physics engines such as Havok seem to swear by dynamic character "
"controllers as the best alternative, while others (PhysX) would rather "
"promote the Kinematic one."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:23
msgid "So, what is really the difference?:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:25
msgid ""
"A **dynamic character controller** uses a rigid body with infinite "
"inertial tensor. Basically, it's a rigid body that can't rotate. Physics "
"engines always let objects collide, then solve their collisions all "
"together. This makes dynamic character controllers able to interact with "
"other physics objects seamlessly (as seen in the platformer demo), "
"however these interactions are not always predictable. Collisions also "
"can take more than one frame to be solved, so a few collisions may seem "
"to displace a tiny bit. Those problems can be fixed, but require a "
"certain amount of skill."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:34
msgid ""
"A **kinematic character controller** is assumed to always begin in a non-"
"colliding state, and will always move to a non colliding state. If it "
"starts in a colliding state, it will try to free itself (like rigid "
"bodies do) but this is the exception, not the rule. This makes their "
"control and motion a lot more predictable and easier to program. However,"
" as a downside, they can't directly interact with other physics objects "
"(unless done by hand in code)."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:42
msgid ""
"This short tutorial will focus on the kinematic character controller. "
"Basically, the oldschool way of handling collisions (which is not "
"necessarily simpler under the hood, but well hidden and presented as a "
"nice and simple API)."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:48
msgid "Fixed process"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:50
msgid ""
"To manage the logic of a kinematic body or character, it is always "
"advised to use fixed process, which is called the same amount of times "
"per second, always. This makes physics and motion calculation work in a "
"more predictable way than using regular process, which might have spikes "
"or lose precision if the frame rate is too high or too low."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:67
msgid "Scene setup"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:69
msgid ""
"To have something to test, here's the scene (from the tilemap tutorial): "
":download:`kbscene.zip </files/kbscene.zip>`. We'll be creating a new "
"scene for the character. Use the robot sprite and create a scene like "
"this:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:75
msgid ""
"Let's add a circular collision shape to the collision body, create a new "
"CircleShape2D in the shape property of CollisionShape2D. Set the radius "
"to 30:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:81
msgid ""
"**Note: As mentioned before in the physics tutorial, the physics engine "
"can't handle scale on most types of shapes (only collision polygons, "
"planes and segments work), so always change the parameters (such as "
"radius) of the shape instead of scaling it. The same is also true for the"
" kinematic/rigid/static bodies themselves, as their scale affect the "
"shape scale.**"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:88
msgid ""
"Now create a script for the character, the one used as an example above "
"should work as a base."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:91
msgid ""
"Finally, instance that character scene in the tilemap, and make the map "
"scene the main one, so it runs when pressing play."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:97
msgid "Moving the Kinematic character"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:99
msgid ""
"Go back to the character scene, and open the script, the magic begins "
"now! Kinematic body will do nothing by default, but it has a really "
"useful function called :ref:`KinematicBody2D.move() "
"<class_KinematicBody2D_move>`. This function takes a :ref:`Vector2 "
"<class_Vector2>` as an argument, and tries to apply that motion to the "
"kinematic body. If a collision happens, it stops right at the moment of "
"the collision."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:106
msgid "So, let's move our sprite downwards until it hits the floor:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:118
msgid ""
"The result is that the character will move, but stop right when hitting "
"the floor. Pretty cool, huh?"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:121
msgid ""
"The next step will be adding gravity to the mix, this way it behaves a "
"little more like an actual game character:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:141
msgid ""
"Now the character falls smoothly. Let's make it walk to the sides, left "
"and right when touching the directional keys. Remember that the values "
"being used (for speed at least) is pixels/second."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:145
msgid "This adds simple walking support by pressing left and right:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:173
msgid "And give it a try."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:176
msgid "Problem?"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:178
msgid ""
"And... it doesn't work very well. If you go to the left against a wall, "
"it gets stuck unless you release the arrow key. Once it is on the floor, "
"it also gets stuck and it won't walk. What is going on??"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:182
msgid ""
"The answer is, what it seems like it should be simple, it isn't that "
"simple in reality. If the motion can't be completed, the character will "
"stop moving. It's as simple as that. This diagram should illustrate "
"better what is going on:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:189
msgid ""
"Basically, the desired motion vector will never complete because it hits "
"the floor and the wall too early in the motion trajectory and that makes "
"it stop there. Remember that even though the character is on the floor, "
"the gravity is always turning the motion vector downwards."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:195
msgid "Solution!"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:197
msgid ""
"The solution? This situation is solved by \"sliding\" by the collision "
"normal. KinematicBody2D provides two useful functions:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:200
msgid ":ref:`KinematicBody2D.is_colliding() <class_KinematicBody2D_is_colliding>`"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:201
msgid ""
":ref:`KinematicBody2D.get_collision_normal() "
"<class_KinematicBody2D_get_collision_normal>`"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:203
msgid "So what we want to do is this:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:207
msgid ""
"When colliding, the function ``move()`` returns the \"remainder\" of the "
"motion vector. That means, if the motion vector is 40 pixels, but "
"collision happened at 10 pixels, the same vector but 30 pixels long is "
"returned."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:212
msgid ""
"The correct way to solve the motion is, then, to slide by the normal this"
" way:"
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:240
msgid ""
"Note that not only the motion has been modified but also the velocity. "
"This makes sense as it helps keep the new direction too."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:243
msgid ""
"The normal can also be used to detect that the character is on floor, by "
"checking the angle. If the normal points up (or at least, within a "
"certain threshold), the character can be determined to be there."
msgstr ""

#: ../../tutorials/2d/kinematic_character_2d.rst:247
msgid ""
"A more complete demo can be found in the demo zip distributed with the "
"engine, or in the https://github.com/godotengine/godot-demo-"
"projects/tree/master/2d/kinematic_char."
msgstr ""

