# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2016, Juan Linietsky, Ariel Manzur and the Godot
# community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-08-22 21:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../tutorials/engine/inputevent.rst:4
msgid "InputEvent"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:7
msgid "What is it?"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:9
msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input Events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:16
msgid "How does it work?"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:18
msgid ""
"Every input event is originated from the user/player (though it's "
"possible to generate an InputEvent and feed them back to the engine, "
"which is useful for gestures). The OS object for each platform will read "
"events from the device, then feed them to MainLoop. As :ref:`SceneTree "
"<class_SceneTree>` is the default MainLoop implementation, events are fed"
" to it. Godot provides a function to get the current SceneTree object : "
"**get_tree()**."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:26
msgid ""
"But SceneTree does not know what to do with the event, so it will give it"
" to the viewports, starting by the \"root\" :ref:`Viewport "
"<class_Viewport>` (the first node of the scene tree). Viewport does quite"
" a lot of stuff with the received input, in order:"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:33
msgid ""
"First of all, the standard _input function will be called in any node "
"with input processing enabled (enable with :ref:`Node.set_process_input()"
" <class_Node_set_process_input>` and override :ref:`Node._input() "
"<class_Node__input>`). If any function consumes the event, it can call "
":ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_set_input_as_handled>`, and the event will not spread "
"any more. This ensures that you can filter all events of interest, even "
"before the GUI. For gameplay input, the _unhandled_input() is generally a"
" better fit, because it allows the GUI to intercept the events."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:40
msgid ""
"Second, it will try to feed the input to the GUI, and see if any control "
"can receive it. If so, the :ref:`Control <class_Control>` will be called "
"via the virtual function :ref:`Control._input_event() "
"<class_Control__input_event>` and the signal \"input_event\" will be "
"emitted (this function is re-implementable by script by inheriting from "
"it). If the control wants to \"consume\" the event, it will call "
":ref:`Control.accept_event() <class_Control_accept_event>` and the event "
"will not spread any more."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:47
msgid ""
"If so far no one consumed the event, the unhandled input callback will be"
" called (enable with :ref:`Node.set_process_unhandled_input() "
"<class_Node_set_process_unhandled_input>` and override "
":ref:`Node._unhandled_input() <class_Node__unhandled_input>`). If any "
"function consumes the event, it can call "
":ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_set_input_as_handled>`, and the event will not spread "
"any more. The unhandled input callback is ideal for full-screen gameplay "
"events, so they are not received when a GUI is active."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:53
msgid ""
"If no one wanted the event so far, and a :ref:`Camera <class_Camera>` is "
"assigned to the Viewport, a ray to the physics world (in the ray "
"direction from the click) will be cast. If this ray hits an object, it "
"will call the :ref:`CollisionObject._input_event() "
"<class_CollisionObject__input_event>` function in the relevant physics "
"object (bodies receive this callback by default, but areas do not. This "
"can be configured through :ref:`Area <class_Area>` properties)."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:59
msgid ""
"Finally, if the event was unhandled, it will be passed to the next "
"Viewport in the tree, otherwise it will be ignored."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:63
msgid "Anatomy of an InputEvent"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:65
msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it "
"does not represent anything and only contains some basic information, "
"such as event ID (which is increased for each event), device index, etc."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:69
msgid ""
"InputEvent has a \"type\" member. By assigning it, it can become "
"different types of input event. Every type of InputEvent has different "
"properties, according to its role."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:73
msgid "Example of changing event type."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:84
msgid "There are several types of InputEvent, described in the table below:"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:87
msgid "Event"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:87
msgid "Type Index"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:87
msgid "Description"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:89
msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:89
msgid "NONE"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:89
msgid "Empty Input Event."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:91
msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:91
msgid "KEY"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:91
msgid "Contains a scancode and unicode value, as well as modifiers."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:94
msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:94
msgid "MOUSE_BUTTON"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:94
msgid "Contains click information, such as button, modifiers, etc."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:97
msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:97
msgid "MOUSE_MOTION"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:97
msgid ""
"Contains motion information, such as relative, absolute positions and "
"speed."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:100
msgid ":ref:`InputEventJoystickMotion <class_InputEventJoystickMotion>`"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:100
msgid "JOYSTICK_MOTION"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:100
msgid "Contains Joystick/Joypad analog axis information."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:103
msgid ":ref:`InputEventJoystickButton <class_InputEventJoystickButton>`"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:103
msgid "JOYSTICK_BUTTON"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:103
msgid "Contains Joystick/Joypad button information."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:106
msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:106
msgid "SCREEN_TOUCH"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:106
msgid ""
"Contains multi-touch press/release information. (only available on mobile"
" devices)"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:110
msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:110
msgid "SCREEN_DRAG"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:110
msgid "Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:113
msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:113
msgid "SCREEN_ACTION"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:113
msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:119
msgid "Actions"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:121
msgid ""
"An InputEvent may or may not represent a pre-defined action. Actions are "
"useful because they abstract the input device when programming the game "
"logic. This allows for:"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:125
msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:127
msgid "Input to be reconfigured at run-time."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:129
msgid ""
"Actions can be created from the Project Settings menu in the Actions tab."
" Read :ref:`doc_simple_2d_game-input_actions_setup` for an explanation on"
" how the action editor works."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:133
msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_is_pressed>` and :ref:`InputEvent <class_InputEvent>`."
msgstr ""

#: ../../tutorials/engine/inputevent.rst:136
msgid ""
"Alternatively, it may be desired to supply the game back with an action "
"from the game code (a good example of this is detecting gestures). "
"SceneTree (derived from MainLoop) has a method for this: "
":ref:`MainLoop.input_event() <class_MainLoop_input_event>`. You would "
"normally use it like this:"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:151
msgid "InputMap"
msgstr ""

#: ../../tutorials/engine/inputevent.rst:153
msgid ""
"Customizing and re-mapping input from code is often desired. If your "
"whole workflow depends on actions, the :ref:`InputMap <class_InputMap>` "
"singleton is ideal for reassigning or creating different actions at run-"
"time. This singleton is not saved (must be modified manually) and its "
"state is run from the project settings (engine.cfg). So any dynamic "
"system of this type needs to store settings in the way the programmer "
"best sees fit."
msgstr ""

