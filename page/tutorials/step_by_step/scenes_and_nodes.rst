.. _doc_scenes_and_nodes:

场景与节点
================

介绍
------------

.. image:: /img/chef.png

试想一秒钟你不再是一个游戏开发者。取而代之地，你是一个大厨！把你时髦的衣服换成一个无檐帽和一个双排扣夹克。现在，你是在为你的宾客打造一个美味的菜肴而不是在做游戏。

所以，一个伙夫如何打造一个菜品呢？菜谱被分为两部分，第一个是成分，第二个是关于准备它的说明。以这种方式，任何人都能够遵照菜谱并调制出你的绝佳创意。

在Godot中制作游戏和这种方式非常相同。使用这个引擎感觉就像是在厨房里。在这个厨房里，“节点（Nodes）”就是装满了用于烹饪的新鲜材料的冰箱。

有很多种类型的节点，有的显示图像、有的播放声音、有的节点显示3D模型等等。有很多。

节点（Nodes）
-----

但先让我们来走基础。一个节点是创建一个游戏的基本元素，它具有一下性质：

-  有名字（Name）
-  具有可编辑的属性（Editable Properties）。
-  每帧（Frame）都能接收对进程的回调（Callback）。
-  能够被扩展（Extended）（来具有更多的功能（Functions））。
-  能够加入其他的节点作为子（Child）。

.. image:: /img/tree.png

最后一个很重要。节点能够使其他节点作为子类。当以这种方式编排的时候，节点会变成一个“树”。

在Godot中，以这种方式来编排节点的能力为组织整理工程创造了一个强有力的工具。因为不同的节点有不同的功能，将他们结合起来则允许了创建更多复杂的功能。

这可能还不甚清晰并且几乎没什么意义。但是过了几节后一切都将大白。目前要记住最重要的一点是有节点这个东西存在，并且能够按这种方式来编排。

场景（Scene）
------

.. image:: /img/scene_tree_example.png

既然节点的存在已经被定义了，下一个逻辑步骤就是解释什么是场景了。

一个场景由一组（以树形图的方式）被分层组织的节点组成，它具有以下属性：

-  一个场景有且只能有一个根节点（Root Node）。
-  场景能够被保存到磁盘上，也能被载入回来。
-  场景能够被“实例化”（Instanced）（后文说明原因）。
-  运行一个游戏意味着运行一个场景。
-  一个工程中可以有几个场景，但是要开始，它们中的一个必须被选定来首先载入。

基本上，Godot编辑器就是一个“场景编辑器”（Scene Editor）。它有很多工具来编辑2D和3D场景以及用户界面（UI，User Interface），但是编辑器的所有内容都是围绕着编辑构成它的场景和节点的概念展开的。

创建一个新工程（Project）
----------------------

理论是枯燥的，所以我们来转换话题走向实际。按照教程类文章的长期传统，第一个工程将会是一个Hello World。为了这件事，编辑器将会被使用。

当Godot可执行程序脱离一个工程运行，工程管理器（Project Manager）就出现了，它帮助开发者管理他们的工程。

.. image:: /img/project_manager.png

要创建一个新工程，“新建工程”（New Project）选项肯定被使用。给选择并创建一个路径（Path）然后指定工程的名字（Name）：

.. image:: /img/create_new_project.png

编辑器（Editor）
------

一旦这个“新工程”被创建，下一步就是打开它。这将会打开Godot编辑器。下图展示了刚打开编辑器时它的样子：

.. image:: /img/empty_editor.png

如前文所述，在Godot中制作游戏就像是在厨房里一样，所以我们来打开冰箱然后加入一些新鲜的节点到工程中。我们将会以一个Hello World!开始。为了做到这一点，肯定要按下“新建节点”（New Node）按钮：

.. image:: /img/newnode_button.png

这将会打开创建节点（Create Node）对话框，展示了一长串能够被创建的节点列表：

.. image:: /img/node_classes.png

从这里，先选择“标签”（Label）节点。直接搜索它可能是最快捷的方式：

.. image:: /img/node_search_label.png

并且最终，我们创建了一个标签（Label）！当创建被按下时，很多事情就发生了：

.. image:: /img/editor_with_label.png

首先，场景变成了一个2D编辑器（因为Label是一个2D节点类型），并且当Label出现时，选定，在视图（Viewport）的左上角。

这个节点出现在了场景树编辑器（Scene Tree Editor）（左上方的一栏里），而且标签的属性（Property）出现在了检查工具（Inspector）中（右侧的一栏）。

下一步就是去改变标签的“文本”（Text）属性了，我们来把它改成“Hello,World!”：

.. image:: /img/hw.png

好了，一切都已就绪来运行场景了！在顶栏按下“运行场景”（Play Scene）按钮（或敲击F6）：

.. image:: /img/playscene.png

然……然后，噢天哪！

.. image:: /img/neversaved.png

场景需要被保存才能运行，所以在场景→保存（Scene->Save）菜单中把场景保存成hello.scn：

.. image:: /img/save_scene.png

然后，有趣的事情发生了。这个文件对话框是一个特别的文件对话框，只允许在工程内保存。工程根目录是“res://”，意味着“资源路径”（Resource Path）。这也就意味着，文件只可以被保存到工程的内部。日后，当进行文件操作的时候记住，“res://”就是资源的路径，并且无论平台和安装位置，它都是游戏中的资源文件所在的一种定位方式。

在保存场景并再一次按下运行场景之后，“Hello, World!”演示应该被执行：

.. image:: /img/helloworld.png

成功了！

.. _doc_scenes_and_nodes-configuring_the_project:

配置（Configuring）工程
-----------------------

好了，是时候去给工程做点配置（Configuration）了。就是现在，唯一运行某些东西的方式就是执行当前的场景。然而，工程有多个场景，因此其中一个必须被设定为主场景（Main Scene）。这个场景是将会在工程运行时被载入的场景。

这些设定将全部被存在engine.cfg文件中，一个win.ini格式的普通文本文件，以便编辑。有一些设定可以在这个文件中被设定，来更改工程的执行方式，所以为了让情况更简单，工程设定（Project Setting）对话框，一种编辑engine.cfg的前端，诞生了。

为了通向这个对话框，只需要走场景→工程设定（Scene -> Project Settings）。

一旦这个窗口打开了，任务就是选一个主场景。这可以很轻易的完成通过改变应用/主场景属性（Application/main_scene）然后选择"hello.scn"。

.. image:: /img/main_scene.png

伴随这个改变，按下常规运行（Play）按钮（或者F5）将会运行这个工程，无论场景是否正在被编辑。

回到场景设定对话框，这个对话框提供了许多能够被加到engine.cfg的选项并且显示出了他们的默认值，如果默认值就可以，那就无需改变它。

当一个值改变时，一个对勾被标记在名字的左侧。这意味着这个属性将被保存到engine.cfg文件中并且会被记住。

附注，对于后文的引用以及超出上文的内容（毕竟这是第一篇教程啊喂！），添加自定义的配置属性又使用:ref:`全局（Globals） <class_Globals>` 实例来在运行期间读取它们是可行的.

未完待续……
------------------

这篇教程谈论了“场景和节点”，但是目前为止，还只有一个场景和一个节点！别担心，下一篇教程将会解决这个问题……
