.. _doc_filesystem:

文件系统(File System)
==========

介绍
------------

文件系统是引擎开发中又一个热门的话题。文件系统管理了资源当如何储存和获取的问题。一个设计精良的文件系统也允许了多个开发者在协作开发时编辑相同的源文件和资源。

Godot引擎的早期版本(以及在被命名为Godot之前的前代版本)使用了一个数据库(Database)。资源被存在其中并被分配一个ID。其他方式也尝试过，比如本地数据库、带有元数据(Metadata)的文件等。最终还是简单的方式胜出了而且现在Godot把所有的资源作为文件存在文件系统中。

实现
--------------

文件系统在磁盘上存储了资源。任何事物，上至一个脚本下至一个场景或者一个PNG图像都可以是引擎的一个资源。如果一个资源包含的属性引用着磁盘上其他资源，那么那些资源的路径也会被包含进去。如果一个资源有内置的子资源，那么这些资源会和所有捆绑的子资源一同存在一个单独的文件中。比如说，一个字体(Font)经常和一个字体贴图(Font Textures)捆绑在一起。

总的来说，Godot的文件系统避免使用元数据文件。原因很简单，因为有资源管理器(Asset Manager)和版本控制器(VCS,Version Controlling System)比我们能实现的其他东西都要好，因此Godot尽最大努力去和SVN、Git、Mercurial、Perforce等一同工作。

一个文件系统内容的例子：

::

    /engine.cfg
    /enemy/enemy.scn
    /enemy/enemy.gd
    /enemy/enemysprite.png
    /player/player.gd
    
engine.cfg
----------

engine.cfg文件是工程的描述文件(Project Description File)，并且它总能在工程的根目录下被找到，事实上它的位置决定了根目录的位置。它是Godot在打开一个工程时首先查找的文件。

这个文件以纯文本(Plain Text)的形式涵盖了工程的配置(Configuration)，以一个win.ini的格式。即使是一个空的engine.cfg也能够充当一个空白工程的基本定义。

路径分隔符(Path delimiter)
-------------------

Godot只支持"/"作为路径分隔符。这是出于可移植性的原因。所有的操作系统都支持这一点，即使是Windows，所以像"C:\project\engine.cfg"这样的路径应当改为"C:/project/engine.cfg"。

资源路径(Resource Path)
-------------

当尝试获取一个资源时，使用主操作系统的文件系统布局可谓是非常的笨拙而且不可移植。为了解决这个问题，一个特殊的路径"res://"诞生了。

路径"res://"将总是指向工程的根目录(engine.cfg所在的位置，因此事实上，"res://engine.cfg"总是有效的)。

当工程局部地从编辑器运行的时候，文件系统只支持读取(Read)和写入(Write)。当被导出或者在不同的设备(比如电话或者控制台或者DVD上)上运行时文件将变为只读(Read-only)的而写入不再被允许。

用户路径(User Path)
---------

向磁盘写入通常依旧是必要的因为各种任务诸如保存游戏状态或者下载内容包等。为此，引擎确保了一个特殊的路径"user://"总是可写入(Writable)的。

主文件系统(Host File System,也称主机文件系统)
---------------

此外，主文件系统路径也可用，但并不推荐这样做因为对于一个被发布的产品我们无法保证在其他所有平台上都有这些路径。然而在Godot中编写开发工具的时候使用主文件系统非常有用！

缺点
---------

这种简单的文件系统设计有一些局限性。第一个问题就是移动资源(重命名或者从一个路径移动到另一个)将会破坏这些资源的引用。这些引用必须被重新定义指向新的资源位置。

第二个就是在Windows和OSX下文件和路径名是对大小写不敏感的。如果一个工作在一个对大小写不敏感的主机文件系统的开发者保存了一个"myfile.PNG"但是把它当成"myfile.png"，这可能在他们的平台上正常运行，但在其他平台，比如Linux、Android上不一定能正常运行。这也同样适用于使用一个压缩包来存储所有文件导出的二进制文件。

在使用Godot时，推荐你的团队为文件清晰地定义一个命名惯例！最不济就只允许小写的文件和路径名。
